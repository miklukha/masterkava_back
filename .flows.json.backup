[
    {
        "id": "254289433a84914b",
        "type": "tab",
        "label": "Operations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6d691e6d89cccf80",
        "type": "tab",
        "label": "Store operations ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "572dfaa9458e5333",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "27e958a26f8b472d",
        "type": "tab",
        "label": "Help",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fcd0e09e.2ef47",
        "type": "tab",
        "label": "LiqPay Payment Status",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5625818d4797c40c",
        "type": "tab",
        "label": "Mongo linking",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a097c62b59a93fa5",
        "type": "subflow",
        "name": "getProducts",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "6b730fd27d3147a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": [
                    {
                        "id": "9378ab793d93f9a7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "be0e91eaeda9e45d",
        "type": "subflow",
        "name": "checkAuthFM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "8afec29839d2345a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 100,
                "wires": [
                    {
                        "id": "8afec29839d2345a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-check-square"
    },
    {
        "id": "3cc90a312bfe3a6f",
        "type": "subflow",
        "name": "auth",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 200,
                "wires": [
                    {
                        "id": "fb8943a6f4c9d5aa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 140,
                "wires": [
                    {
                        "id": "1988dc59f854ca7e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d025cd27.f975",
        "type": "subflow",
        "name": "authenticate()",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "adfa8fb5.06713"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 140,
                "wires": [
                    {
                        "id": "68867def13630798",
                        "port": 1
                    }
                ]
            },
            {
                "x": 600,
                "y": 220,
                "wires": [
                    {
                        "id": "c20f2a24.77c63",
                        "port": 0
                    },
                    {
                        "id": "9477ba71c4bc9500",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-address-card"
    },
    {
        "id": "9f43ceecbe5c8618",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "02867b04f323983e",
            "41ce73f80f967f2c",
            "7d745f91f4ac681a",
            "4f6b79dc7a07448b"
        ],
        "x": 34,
        "y": 19,
        "w": 532,
        "h": 122
    },
    {
        "id": "10f169318ad1a329",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1fd66a7ed16cf866",
            "1eb1841fc3df6a8e",
            "af9e5bccd86b36de",
            "cc98cb3f9f3ee8d6",
            "5b2452df50fbf1b9",
            "89c2e450b846c7c9"
        ],
        "x": 34,
        "y": 179,
        "w": 712,
        "h": 162
    },
    {
        "id": "b7f4d86114a55d70",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "07525484e994f095",
            "28f6603d256eb461",
            "88df837133eddd5d",
            "9497ff1729fe73e6"
        ],
        "x": 34,
        "y": 379,
        "w": 792,
        "h": 122
    },
    {
        "id": "1c2202b3413ad6f7",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dcac4fe4170f8a1a",
            "b4519518901a3b1b",
            "ad62655d84b9aff1",
            "9b18d0692c3da728"
        ],
        "x": 34,
        "y": 539,
        "w": 612,
        "h": 122
    },
    {
        "id": "024c1ba1dc39c40d",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "331eaafb44d0fdc5",
            "a129d65a5e8a09de",
            "eb3ac15f633f1fc7",
            "024dd4cd90e32b52",
            "8e604cd11c5a9dcb",
            "716ef4768a93e2e0",
            "a691858b679166fa",
            "ea801f1f8aa87cf7",
            "0edd863d78f53e53"
        ],
        "x": 34,
        "y": 699,
        "w": 792,
        "h": 202
    },
    {
        "id": "2e23327e0aa0042c",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "29fd809dc62fe637",
            "ae82a760f512d716",
            "36073d925a2cd8ef",
            "ab7126da435ada47"
        ],
        "x": 34,
        "y": 939,
        "w": 592,
        "h": 142
    },
    {
        "id": "46754a6258cacf85",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a310f231786a1a62",
            "d3ce801aa9c8eae8",
            "8639587e5b6a68a8",
            "aa246705f235df7c",
            "458063eab4db9cad"
        ],
        "x": 34,
        "y": 1119,
        "w": 732,
        "h": 142
    },
    {
        "id": "1013a31fe9ac9265",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4df507d9416797f1",
            "7508642bfaa1fa4f",
            "d672b0f82d3d988e",
            "c3b222eeaf84350c"
        ],
        "x": 34,
        "y": 1299,
        "w": 672,
        "h": 142
    },
    {
        "id": "e629b0fe5d3c5f61",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e8a0ceab6e302650",
            "74f88ff6e1ce6269",
            "c4933cdf45a3018a",
            "57dfc1ce96cb73b3"
        ],
        "x": 34,
        "y": 1479,
        "w": 572,
        "h": 142
    },
    {
        "id": "7579215f712a4ebb",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6fef0c19e928e81b",
            "1cd34379efe523d3",
            "e7a5b9241e278143",
            "cb6a89ccdd6b626d"
        ],
        "x": 34,
        "y": 1659,
        "w": 612,
        "h": 142
    },
    {
        "id": "f88877fc8db92035",
        "type": "group",
        "z": "572dfaa9458e5333",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f9a0f82c11903966",
            "9fd58a423081395a",
            "b9d241f7c21a84da",
            "68cc7cedd1b416bf",
            "063ccd6fdf1fd599",
            "965b95ad54b9dbd0",
            "da27471bf65208ff"
        ],
        "x": 54,
        "y": 59
    },
    {
        "id": "11b41d9c358fbbc7",
        "type": "group",
        "z": "6d691e6d89cccf80",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0378f4e7da866670",
            "0c38ea0ed211618e",
            "e341ecea77834032",
            "043273f2a8508fd9",
            "c867a6f44cbbd5f0",
            "919f2bb373ea6628",
            "a8fb6a094339f033",
            "e0f8b41137b2d3f3",
            "6eb5839307ba394f",
            "e457df9a8795e770"
        ],
        "x": 14,
        "y": 99,
        "w": 872,
        "h": 202
    },
    {
        "id": "0a150d04a0787f8e",
        "type": "group",
        "z": "6d691e6d89cccf80",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4234cd0c91cec0fe",
            "57aed6d48e7807ab",
            "b95060745c78c8b8",
            "3d4aec1434784919",
            "989fc4e75f7267a5",
            "7df002ef32ab9776",
            "96bccb99f906781a",
            "90b7d71d645b6410",
            "dc51d7a1f15863ce",
            "3daecd34275b7d5a",
            "0bbee4a4474ba7a4",
            "a972a3a57e5c3159",
            "e8a386eabeaa307c",
            "263a45d438eea4ea",
            "f11c6b872dcb13ce",
            "64e87f146bb7c985",
            "d31d8a386fe96ba6",
            "1b6e2f2d9ca97c78",
            "1d623f44217498df",
            "08c9e12d8638472d",
            "22d5f59a7192b812",
            "08f9b1c9f1b6bf86",
            "c51eb8985f2f10a3",
            "b81f4fbeea309fd8",
            "f268b45dc3b2a222",
            "c9c627b0a6af71d4",
            "b7cfac732d76e1d5",
            "fb1173e5a2210c94",
            "a843ac34f6f2f665"
        ],
        "x": 14,
        "y": 339,
        "w": 1072,
        "h": 622
    },
    {
        "id": "c0b0251c40a3b95d",
        "type": "group",
        "z": "6d691e6d89cccf80",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0632f252f439a751",
            "75530cd2.06a71c",
            "97fcfe96.6f76c",
            "4d6cfdccc34546b2",
            "488bf4b1d65b9a3b",
            "74c6161a7d0ee640",
            "5680f7958362b006",
            "6afb867fea63aacd",
            "72656fb743344b5e",
            "1faf730dc135de6d",
            "ccaec6ccf77fdd23",
            "db8c30bc4bdea22b",
            "e9552de6832c27c6",
            "8914a42b4616d099",
            "f27612a8b6fec8a5",
            "a2a3cb9c54ca6b3d",
            "65e822e95975693e",
            "452bb0dbe8b8a7cc",
            "a3cb9fb4108bf528",
            "e05ed5f110a73ec3",
            "65435a18dbd80012"
        ],
        "x": 14,
        "y": 979,
        "w": 1312,
        "h": 362
    },
    {
        "id": "a36154d393038484",
        "type": "group",
        "z": "6d691e6d89cccf80",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "10f6db36557cf78a",
            "429013cfcc1d8e25",
            "bcb99566c443c02f",
            "9531437ba3acd3b4",
            "23a66c4f0a1ee112",
            "23534fe124dd2dcc"
        ],
        "x": 14,
        "y": 1359,
        "w": 852,
        "h": 142
    },
    {
        "id": "b0042c1a4b8b65f4",
        "type": "group",
        "z": "6d691e6d89cccf80",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "885a111e319fef0e",
            "21555cf0cd78d917",
            "bf8987158f7e3a62",
            "bf4f667d3cdd0f26",
            "eeb898509138a2cd",
            "6007c78f96e02eaf",
            "355de9816ad0fbb9",
            "9a04e37fb3fb786e",
            "25afbcb8b3d179e9",
            "4273784fbebaf4c1",
            "52d6555ff52a24fd",
            "523b2490d7107ffb",
            "0fcf0e68d1d1ab82",
            "6c6a762203457813",
            "a3eb40901b234f7b",
            "1f9acf1c045a9656"
        ],
        "x": 14,
        "y": 1519,
        "w": 852,
        "h": 422
    },
    {
        "id": "2272c92dc80bcb38",
        "type": "mongodb",
        "hostname": "cluster0.smbbcpt.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "",
        "port": "27017",
        "db": "masterkava",
        "name": ""
    },
    {
        "id": "9378ab793d93f9a7",
        "type": "link call",
        "z": "a097c62b59a93fa5",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6b730fd27d3147a8",
        "type": "function",
        "z": "a097c62b59a93fa5",
        "name": "function 5",
        "func": "msg.payload = {\n    deleted: false\n}\n\nmsg.collection = \"products\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9378ab793d93f9a7"
            ]
        ]
    },
    {
        "id": "8afec29839d2345a",
        "type": "function",
        "z": "be0e91eaeda9e45d",
        "name": "checker",
        "func": "const headers = msg.req.rawHeaders\nconst index = headers.indexOf(\"referer\")\n\nif (headers[index + 1] == 'https://testforce.tadiranforce.co.il/') {\n    return [msg, null]\n} else {\n    msg.statusCode = 401;\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"Forbidden!\"\n    }\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "152b98ae70cf8848"
            ],
            [
                "76cde29eeec8e2da",
                "152b98ae70cf8848"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "76cde29eeec8e2da",
        "type": "function",
        "z": "be0e91eaeda9e45d",
        "name": "send error",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    \"success\": false,\n    \"error\": \"Forbidden!\"\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "ad95c846a2724046"
            ]
        ]
    },
    {
        "id": "ad95c846a2724046",
        "type": "http response",
        "z": "be0e91eaeda9e45d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "152b98ae70cf8848",
        "type": "debug",
        "z": "be0e91eaeda9e45d",
        "name": "FM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "1988dc59f854ca7e",
        "type": "function",
        "z": "3cc90a312bfe3a6f",
        "name": "sendResponse()",
        "func": "const isEmailExist = msg.payload.length !== 0;\n\n\nif (!isEmailExist){\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"Forbidden!\"\n    }\n    \n    msg.statusCode = 401;\n    return [null, msg]\n} else {\n    msg.res.user = msg.payload\n    node.warn(msg.res.user);\n    msg.payload = msg.oldpayload\n    delete msg.oldpayload\n    return[msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 160,
        "wires": [
            [],
            [
                "a34807ec8545e2db"
            ]
        ]
    },
    {
        "id": "a34807ec8545e2db",
        "type": "http response",
        "z": "3cc90a312bfe3a6f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "fb8943a6f4c9d5aa",
        "type": "function",
        "z": "3cc90a312bfe3a6f",
        "name": "checkToken()",
        "func": "const result = dotenv.config();\nconst { SECRET_KEY } = result.parsed;\n\nif (msg.req.cookies.user_token) {\n    msg.oldpayload = msg.payload\n\n    try {\n        const { id } = jwt.verify(msg.req.cookies.user_token, SECRET_KEY);\n        msg.collection = \"users\";\n        msg.payload = {\n            _id: objectid(id)\n        }\n        return [msg, null];\n\n    } catch (error) {\n        node.warn(error.message)\n    };\n} else {\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "dotenv",
                "module": "dotenv"
            }
        ],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "035e4e958ed74eef",
                "53bf848b4ee63fdd"
            ],
            [
                "593e048f97b4d06a",
                "53bf848b4ee63fdd"
            ]
        ]
    },
    {
        "id": "593e048f97b4d06a",
        "type": "function",
        "z": "3cc90a312bfe3a6f",
        "name": "sendError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Forbidden\"\n}\n\nmsg.statusCode = 401;\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "71872b64ea0a49ad"
            ]
        ]
    },
    {
        "id": "71872b64ea0a49ad",
        "type": "http response",
        "z": "3cc90a312bfe3a6f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 240,
        "wires": []
    },
    {
        "id": "035e4e958ed74eef",
        "type": "link call",
        "z": "3cc90a312bfe3a6f",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "1988dc59f854ca7e",
                "f418d6c7bc50da4c"
            ]
        ]
    },
    {
        "id": "f418d6c7bc50da4c",
        "type": "debug",
        "z": "3cc90a312bfe3a6f",
        "name": "debug 229",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 80,
        "wires": []
    },
    {
        "id": "53bf848b4ee63fdd",
        "type": "debug",
        "z": "3cc90a312bfe3a6f",
        "name": "debug 230",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "a631b9446bb05070",
        "type": "inject",
        "z": "3cc90a312bfe3a6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 300,
        "wires": [
            [
                "fb8943a6f4c9d5aa"
            ]
        ]
    },
    {
        "id": "adfa8fb5.06713",
        "type": "function",
        "z": "d025cd27.f975",
        "name": "validateToken()",
        "func": "const result = dotenv.config();\nconst { SECRET_KEY } = result.parsed;\n\nconst { authorization = \"\" } = msg.req.headers;\nconst [bearer, token] = authorization.split(\" \");\n\nif (bearer !== \"Bearer\") {\n    return [null, msg]\n}\n\ntry {\n    const { id } = jwt.verify(token, SECRET_KEY);\n    \n    msg.payload = {\n        _id: objectid(id)\n    }\n\n    msg.req.token = token;\n    msg.collection = \"users\";\n\n    return [msg, null];\n}\n\ncatch {\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "dotenv",
                "module": "dotenv"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 160,
        "y": 160,
        "wires": [
            [
                "524dfefb63ed79ad"
            ],
            [
                "c20f2a24.77c63"
            ]
        ]
    },
    {
        "id": "c20f2a24.77c63",
        "type": "function",
        "z": "d025cd27.f975",
        "name": "setError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Unauthorized\"\n}\n\nmsg.statusCode = 401;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "524dfefb63ed79ad",
        "type": "link call",
        "z": "d025cd27.f975",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "68867def13630798"
            ]
        ]
    },
    {
        "id": "68867def13630798",
        "type": "function",
        "z": "d025cd27.f975",
        "name": "checkToken()",
        "func": "const user = msg.payload[0];\n\nif (!user || !user.token || user.token !== msg.req.token) {\n    return [msg, null]\n} else {\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 100,
        "wires": [
            [
                "9477ba71c4bc9500"
            ],
            []
        ]
    },
    {
        "id": "9477ba71c4bc9500",
        "type": "function",
        "z": "d025cd27.f975",
        "name": "setError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Unauthorized\"\n}\n\nmsg.statusCode = 401;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9c978ba2294068e8",
        "type": "catch",
        "z": "254289433a84914b",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 20,
        "wires": [
            [
                "3c195631ac636fd4"
            ]
        ]
    },
    {
        "id": "3c195631ac636fd4",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error.message",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 20,
        "wires": []
    },
    {
        "id": "286b44a9d3938b8c",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/register",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "f07687a78b7197b9"
            ]
        ]
    },
    {
        "id": "3cc8bab9e3145a0a",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "80d5d36c1d0b31e5",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "3cc8bab9e3145a0a"
            ]
        ]
    },
    {
        "id": "f07687a78b7197b9",
        "type": "function",
        "z": "254289433a84914b",
        "name": "findEmail()",
        "func": "const { email } = msg.req.body;\n\nmsg.payload = {\n    email\n}\nmsg.collection = \"users\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "93ffc9080549daeb"
            ]
        ]
    },
    {
        "id": "93ffc9080549daeb",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "71da3d11f16af381"
            ]
        ]
    },
    {
        "id": "71da3d11f16af381",
        "type": "function",
        "z": "254289433a84914b",
        "name": "createUser()",
        "func": "const isEmailExist = msg.payload.length !== 0;\n\nif (!isEmailExist) {\n    const { name, email, password, role = \"user\" } = msg.req.body;\n    const passwordHash = await bcrypt.hash(password, 10);\n\n    msg.payload = {\n        _id: objectid(),\n        name,\n        email,\n        password: passwordHash,\n        orders: [],\n        shipping: {\n            firstName: \"\",\n            lastName: \"\",\n            phone: \"\"\n        },\n        role, // only admin OR user\n        token: \"\" \n    }\n    msg.collection = \"users\";\n\n    msg.statusCode = 200;\n    return [msg, null];\n}\n\nif (isEmailExist){\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "80d5d36c1d0b31e5"
            ],
            [
                "5e0c6f7d6748aa9c"
            ]
        ]
    },
    {
        "id": "8844ec8e0c680d4a",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 380,
        "wires": [
            [
                "a1b28182cf5b1724"
            ]
        ]
    },
    {
        "id": "3f37e028a8878403",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 380,
        "wires": []
    },
    {
        "id": "1e14480f782cfca8",
        "type": "function",
        "z": "254289433a84914b",
        "name": "checkEmail()",
        "func": "const result = dotenv.config();\nconst { SECRET_KEY } = result.parsed;\nconst isEmailExist = msg.payload.length !== 0;\n\nif (isEmailExist) {\n    const user = msg.payload[0];\n    const { password } = msg.req.body;\n    const isPasswordCorrect = await bcrypt.compare(password, user.password);\n    \n    if (isPasswordCorrect) {\n        const payload = {\n            id: user._id\n        }\n\n        const token = jwt.sign(payload, SECRET_KEY, { expiresIn: '10d' })\n\n        msg.payload = {\n            token\n        }\n\n        msg.user = user;\n\n        return [msg, null];\n    }\n\n    if (!isPasswordCorrect){\n        return [null, msg]\n    }\n}\n\nif (!isEmailExist) {\n    return [null,  msg];\n\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "dotenv",
                "module": "dotenv"
            }
        ],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "a17ce1d83b08b90d"
            ],
            [
                "02d90907ba7ec1f2"
            ]
        ]
    },
    {
        "id": "125bcc53a1edfa41",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "1e14480f782cfca8"
            ]
        ]
    },
    {
        "id": "a1b28182cf5b1724",
        "type": "function",
        "z": "254289433a84914b",
        "name": "findEmail()",
        "func": "const { email } = msg.req.body;\n\nmsg.payload = {\n    email\n}\nmsg.collection = \"users\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 380,
        "wires": [
            [
                "125bcc53a1edfa41"
            ]
        ]
    },
    {
        "id": "e49d1c22247329f1",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/logout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "c4de64fef46e737d"
            ]
        ]
    },
    {
        "id": "962e2be5ddd19cfc",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 580,
        "wires": []
    },
    {
        "id": "5e0c6f7d6748aa9c",
        "type": "function",
        "z": "254289433a84914b",
        "name": "setError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Email is already in use\"\n}\n\nmsg.statusCode = 409;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 260,
        "wires": [
            [
                "3cc8bab9e3145a0a"
            ]
        ]
    },
    {
        "id": "02d90907ba7ec1f2",
        "type": "function",
        "z": "254289433a84914b",
        "name": "setError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Invalid email or password\"\n}\n\nmsg.statusCode = 401;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "3f37e028a8878403"
            ]
        ]
    },
    {
        "id": "a17ce1d83b08b90d",
        "type": "function",
        "z": "254289433a84914b",
        "name": "addToken()",
        "func": "const { token } = msg.payload;\nconst { _id } = msg.user;\n\nmsg.payload = {\n    $set: {\n        token\n    }\n}\n\nmsg.query = {\n    _id: objectid(_id)\n};\n\nmsg.collection = \"users\";\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 810,
        "y": 360,
        "wires": [
            [
                "d0b2f7962ea7e14e"
            ]
        ]
    },
    {
        "id": "d0b2f7962ea7e14e",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 980,
        "y": 360,
        "wires": [
            [
                "3f37e028a8878403"
            ]
        ]
    },
    {
        "id": "c4de64fef46e737d",
        "type": "subflow:d025cd27.f975",
        "z": "254289433a84914b",
        "name": "",
        "x": 215,
        "y": 580,
        "wires": [
            [
                "55a353b084d06163"
            ],
            [
                "962e2be5ddd19cfc"
            ]
        ],
        "l": false
    },
    {
        "id": "55a353b084d06163",
        "type": "function",
        "z": "254289433a84914b",
        "name": "deleteToken()",
        "func": "const user = msg.payload[0];\nconst { _id } = user;\n\nmsg.payload = {\n    $set: {\n        token: ''\n    }\n}\n\nmsg.query = {\n    _id: objectid(_id)\n};\n\nmsg.collection = \"users\";\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 540,
        "wires": [
            [
                "b72c8b9ede6317d8"
            ]
        ]
    },
    {
        "id": "b72c8b9ede6317d8",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 520,
        "y": 540,
        "wires": [
            [
                "5e7a80bcc9428f74"
            ]
        ]
    },
    {
        "id": "5e7a80bcc9428f74",
        "type": "function",
        "z": "254289433a84914b",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "962e2be5ddd19cfc"
            ]
        ]
    },
    {
        "id": "0378f4e7da866670",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "",
        "url": "/categories",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "0c38ea0ed211618e"
            ]
        ]
    },
    {
        "id": "0c38ea0ed211618e",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "createCategory()",
        "func": "const {label, name} = msg.req.body;\n\nmsg.payload = {\n    _id: objectid(),\n    label,\n    name,\n    createdAt: new Date()\n}\nmsg.collection = \"categories\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "e341ecea77834032"
            ]
        ]
    },
    {
        "id": "e341ecea77834032",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "043273f2a8508fd9"
            ]
        ]
    },
    {
        "id": "043273f2a8508fd9",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "c867a6f44cbbd5f0"
            ]
        ]
    },
    {
        "id": "c867a6f44cbbd5f0",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "919f2bb373ea6628",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "",
        "url": "/categories",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "a8fb6a094339f033"
            ]
        ]
    },
    {
        "id": "a8fb6a094339f033",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "getCategories()",
        "func": "msg.payload = {}\n\nmsg.collection = \"categories\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "e0f8b41137b2d3f3"
            ]
        ]
    },
    {
        "id": "e0f8b41137b2d3f3",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "6eb5839307ba394f"
            ]
        ]
    },
    {
        "id": "6eb5839307ba394f",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 200,
        "wires": []
    },
    {
        "id": "e457df9a8795e770",
        "type": "comment",
        "z": "6d691e6d89cccf80",
        "g": "11b41d9c358fbbc7",
        "name": "Categories",
        "info": "",
        "x": 100,
        "y": 140,
        "wires": []
    },
    {
        "id": "c1b66edbf80cc196",
        "type": "catch",
        "z": "6d691e6d89cccf80",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "121b679a42fe1861"
            ]
        ]
    },
    {
        "id": "121b679a42fe1861",
        "type": "debug",
        "z": "6d691e6d89cccf80",
        "name": "store errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error.message",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "4234cd0c91cec0fe",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "url": "/products/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "57aed6d48e7807ab"
            ]
        ]
    },
    {
        "id": "57aed6d48e7807ab",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "getProductById()",
        "func": "const productId = msg.req.params.id;\n\n// msg.payload = {\n//     _id: objectid(productId)\n// }\n\n// msg.collection = \"products\";\n// return msg;\nconst pipeline = [\n    {\n        $match: {\n            _id: objectid(productId)\n        }\n    },\n    {\n        $lookup: {\n            from: \"categories\",\n            localField: \"category\",\n            foreignField: \"_id\",\n            as: \"category_doc\",\n        }\n    },\n    {\n        $unwind: \"$category_doc\"\n    },\n    {\n        $project: {\n            _id: 1,\n            name: 1,\n            code: 1,\n            availability: 1,\n            category: \"$category_doc.name\",\n            characteristics: 1,\n            price: 1,\n            description: 1,\n            roastLevel: 1,\n            countries: 1,\n            image: 1,\n            deleted: 1\n        }\n    }\n];\n\nmsg.payload = pipeline;\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "90b7d71d645b6410"
            ]
        ]
    },
    {
        "id": "b95060745c78c8b8",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 680,
        "wires": []
    },
    {
        "id": "3d4aec1434784919",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "url": "/products",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "96bccb99f906781a"
            ]
        ]
    },
    {
        "id": "989fc4e75f7267a5",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 480,
        "wires": []
    },
    {
        "id": "7df002ef32ab9776",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "links": [
            "d66b320450918147"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 470,
        "y": 460,
        "wires": [
            [
                "dc51d7a1f15863ce"
            ]
        ]
    },
    {
        "id": "96bccb99f906781a",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "getProducts()",
        "func": "const pipeline = [\n    {\n        $match: {\n            deleted: false\n        }\n    },\n    {\n        $lookup: {\n            from: \"categories\",\n            localField: \"category\",\n            foreignField: \"_id\",\n            as: \"category_doc\",\n        }\n    },\n    {\n        $unwind: \"$category_doc\"\n    },\n    {\n        $project: {\n            _id: 1,\n            name: 1,\n            code: 1,\n            availability: 1,\n            category: {\n                name: \"$category_doc.name\",\n                label: \"$category_doc.label\"\n            },\n            characteristics: 1,\n            price: 1,\n            description: 1,\n            roastLevel: 1,\n            countries: 1,\n            image: 1,\n            deleted: 1\n        }\n    }\n];\n\nmsg.payload = pipeline;\nmsg.collection = \"products\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 460,
        "wires": [
            [
                "7df002ef32ab9776"
            ]
        ]
    },
    {
        "id": "90b7d71d645b6410",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "links": [
            "d66b320450918147"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "b95060745c78c8b8"
            ]
        ]
    },
    {
        "id": "dc51d7a1f15863ce",
        "type": "switch",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "property": "req.query.sort",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "price_asc",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "price_desc",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "popular",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "category",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "country",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "price",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 630,
        "y": 460,
        "wires": [
            [
                "0bbee4a4474ba7a4"
            ],
            [
                "a972a3a57e5c3159"
            ],
            [
                "3daecd34275b7d5a",
                "989fc4e75f7267a5"
            ],
            [
                "263a45d438eea4ea"
            ],
            [
                "f11c6b872dcb13ce"
            ],
            [
                "e8a386eabeaa307c"
            ],
            [
                "989fc4e75f7267a5"
            ]
        ]
    },
    {
        "id": "3daecd34275b7d5a",
        "type": "debug",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "debug 235",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 460,
        "wires": []
    },
    {
        "id": "0bbee4a4474ba7a4",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "sortByPriceAsc()",
        "func": "if (Array.isArray(msg.payload)) {\n    msg.payload.sort((a, b) => a.price - b.price);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 380,
        "wires": [
            [
                "989fc4e75f7267a5"
            ]
        ]
    },
    {
        "id": "a972a3a57e5c3159",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "sortByPriceDesc()",
        "func": "if (Array.isArray(msg.payload)) {\n    msg.payload.sort((a, b) => b.price - a.price);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "989fc4e75f7267a5"
            ]
        ]
    },
    {
        "id": "e8a386eabeaa307c",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "sortByPrice()",
        "func": "const {min, max} = msg.req.query;\n\nmsg.payload = msg.payload.filter(product =>\n    product.price >= min && product.price <= max\n);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            [
                "989fc4e75f7267a5"
            ]
        ]
    },
    {
        "id": "263a45d438eea4ea",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "sortByCategory()",
        "func": "const { label } = msg.req.query;\nconst categories = label.split(',');\n\n// node.warn(categories.inculdes(product.category.label))\n\n// msg.payload = msg.payload.filter(product =>\n//     product.category.label === label\n// );\n\nmsg.payload = msg.payload.filter(product => \n    categories.includes(product.category.label)\n);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 810,
        "y": 500,
        "wires": [
            [
                "989fc4e75f7267a5"
            ]
        ]
    },
    {
        "id": "f11c6b872dcb13ce",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "sortByCountry()",
        "func": "const { name } = msg.req.query;\nconst countries = name.split(',');\n\nmsg.payload = msg.payload.filter(product => {\n    const productCountries = product.countries.map(country => country.toLowerCase());\n    const matchingCountries = productCountries.filter(country => countries.includes(country));\n    return matchingCountries.length > 0;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 580,
        "wires": [
            [
                "989fc4e75f7267a5"
            ]
        ]
    },
    {
        "id": "64e87f146bb7c985",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "url": "/delete/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "1b6e2f2d9ca97c78"
            ]
        ]
    },
    {
        "id": "d31d8a386fe96ba6",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 760,
        "wires": []
    },
    {
        "id": "1b6e2f2d9ca97c78",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "deleteProduct()",
        "func": "const productId = msg.req.params.id;\n\nmsg.payload = {\n    $set: { deleted: true }\n};\n\nmsg.query = {\n    _id: objectid(productId)\n};\n\nmsg.collection = \"products\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 300,
        "y": 760,
        "wires": [
            [
                "1d623f44217498df"
            ]
        ]
    },
    {
        "id": "1d623f44217498df",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 480,
        "y": 760,
        "wires": [
            [
                "d31d8a386fe96ba6"
            ]
        ]
    },
    {
        "id": "08c9e12d8638472d",
        "type": "comment",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "Products",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "22d5f59a7192b812",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "url": "/products",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 840,
        "wires": [
            [
                "f268b45dc3b2a222"
            ]
        ]
    },
    {
        "id": "08f9b1c9f1b6bf86",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 470,
        "y": 840,
        "wires": [
            [
                "c51eb8985f2f10a3"
            ]
        ]
    },
    {
        "id": "c51eb8985f2f10a3",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 840,
        "wires": [
            [
                "b81f4fbeea309fd8"
            ]
        ]
    },
    {
        "id": "b81f4fbeea309fd8",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 840,
        "wires": []
    },
    {
        "id": "f268b45dc3b2a222",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "createProduct()",
        "func": "const { name, code, availability, sourness, \n        bitterness, sturdiness, saturation, price,  \n        description, roastLevel, countries, image,\n        category } = msg.req.body;\n\nconst currentDir = path.resolve('');\nconst imgPath = currentDir + \"/data/upload/\" + image;\n\nmsg.payload = {\n    _id: objectid(),\n    name,\n    code, \n    availability: availability === \"true\",\n    category: objectid(category), \n    characteristics: {\n        sourness: parseInt(sourness), \n        bitterness: parseInt(bitterness),\n        sturdiness: parseInt(sturdiness),\n        saturation: parseInt(saturation)\n    },\n    price: parseInt(price),\n    description,\n    roastLevel, \n    countries: countries.split(',').map(c => c.trim()),\n    image: imgPath,\n    deleted: false\n}\nmsg.collection = \"products\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "08f9b1c9f1b6bf86"
            ]
        ]
    },
    {
        "id": "c9c627b0a6af71d4",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "url": "/products/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "fb1173e5a2210c94"
            ]
        ]
    },
    {
        "id": "b7cfac732d76e1d5",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 920,
        "wires": []
    },
    {
        "id": "fb1173e5a2210c94",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "updateProduct()",
        "func": "const productId = msg.req.params.id;\nconst { name, code, availability, sourness,\n    bitterness, sturdiness, saturation, price,\n    description, roastLevel, countries,\n    category } = msg.req.body;\n\nmsg.payload = {\n    $set: { \n        name,\n        code,\n        availability: availability === \"true\",\n        category: objectid(category),\n        characteristics: {\n            sourness: parseInt(sourness),\n            bitterness: parseInt(bitterness),\n            sturdiness: parseInt(sturdiness),\n            saturation: parseInt(saturation)\n        },\n        price: parseInt(price),\n        description,\n        roastLevel,\n        countries: countries.split(',').map(c => c.trim()),\n        // image: imgPath\n    }\n};\n\nmsg.query = {\n    _id: objectid(productId)\n};\n\nmsg.collection = \"products\";\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 300,
        "y": 920,
        "wires": [
            [
                "a843ac34f6f2f665"
            ]
        ]
    },
    {
        "id": "a843ac34f6f2f665",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "0a150d04a0787f8e",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 480,
        "y": 920,
        "wires": [
            [
                "b7cfac732d76e1d5"
            ]
        ]
    },
    {
        "id": "0632f252f439a751",
        "type": "comment",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "Images",
        "info": "",
        "x": 90,
        "y": 1020,
        "wires": []
    },
    {
        "id": "75530cd2.06a71c",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "97fcfe96.6f76c"
            ]
        ]
    },
    {
        "id": "97fcfe96.6f76c",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "onFileUpload()",
        "func": "const currentDir = path.resolve('');\nconst decodedFilename = msg.req.files[0].originalname;\n\nmsg.filename = currentDir + \"/data\" + msg.req.route.path + \"/\" + decodedFilename;\nmsg.path = currentDir + \"/data\" + msg.req.route.path + \"/\"\nmsg.payload.file = msg.req.files[0].buffer;\nmsg.payload = msg.payload.file;\n\nreturn [null, msg];\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 300,
        "y": 1140,
        "wires": [
            [
                "4d6cfdccc34546b2"
            ],
            [
                "488bf4b1d65b9a3b"
            ]
        ]
    },
    {
        "id": "4d6cfdccc34546b2",
        "type": "fs-mkdir",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "Make Folder",
        "purpose": "reg",
        "path": "path",
        "pathType": "msg",
        "foldername": "filename",
        "foldernameType": "msg",
        "recursive": true,
        "exists": true,
        "prefix": "",
        "prefixType": "str",
        "mode": "777",
        "property": "payload",
        "propertyType": "msg",
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "74c6161a7d0ee640"
            ]
        ]
    },
    {
        "id": "488bf4b1d65b9a3b",
        "type": "file",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 480,
        "y": 1200,
        "wires": [
            [
                "6afb867fea63aacd"
            ]
        ]
    },
    {
        "id": "74c6161a7d0ee640",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "setPayloadStart()",
        "func": "const currentDir = path.resolve('');\n\nmsg.payload = {\n}\nmsg.payload.start = currentDir + \"/data\" + msg.req.route.path;\n// msg.payload.start = \"/data/storage/\" + msg.req.route.path;\nnode.warn(msg.payload.start)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 670,
        "y": 1080,
        "wires": [
            [
                "5680f7958362b006"
            ]
        ]
    },
    {
        "id": "5680f7958362b006",
        "type": "fs-file-lister",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "start": "{{msg.payload.start}}",
        "pattern": "",
        "folders": "",
        "hidden": true,
        "lstype": "both",
        "path": false,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 840,
        "y": 1080,
        "wires": [
            [
                "e9552de6832c27c6"
            ]
        ]
    },
    {
        "id": "6afb867fea63aacd",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "setPayloadStart()",
        "func": "const currentDir = path.resolve('');\nmsg.payload.start = currentDir + \"/data\" + msg.req.route.path;\n//msg.payload.start = \"/data/\"+msg.req.query.path;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 650,
        "y": 1200,
        "wires": [
            [
                "72656fb743344b5e"
            ]
        ]
    },
    {
        "id": "72656fb743344b5e",
        "type": "fs-file-lister",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "start": "{{msg.payload.start}}",
        "pattern": "",
        "folders": "",
        "hidden": true,
        "lstype": "both",
        "path": false,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 820,
        "y": 1200,
        "wires": [
            [
                "db8c30bc4bdea22b"
            ]
        ]
    },
    {
        "id": "1faf730dc135de6d",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ccaec6ccf77fdd23",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 1200,
        "wires": []
    },
    {
        "id": "db8c30bc4bdea22b",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "func": "// @ts-ignore\nNewMsg = {};\nNewMsg.payload={\n    success:true,\n};\nNewMsg.payload.payload = msg.payload.map(elem=>{\n    return{\n        \"isDirectory\":elem.stat.isDirectory,\n        \"name\":elem.name,\n        \"path\":elem.name,\n        \"size\":(elem.stat.size/1048576).toFixed(3) + \"Мb\",\n        \"editedAt\":elem.stat.created,\n    }\n})\n\nmsg.payload = NewMsg.payload;\nmsg.req =\"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1200,
        "wires": [
            [
                "ccaec6ccf77fdd23"
            ]
        ]
    },
    {
        "id": "e9552de6832c27c6",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "func": "// @ts-ignore\nNewMsg = {};\nNewMsg.payload={\n    success:true,\n};\nNewMsg.payload.payload = msg.payload.map(elem=>{\n    return{\n        \"isDirectory\":elem.stat.isDirectory,\n        \"name\":elem.name,\n        \"path\":elem.name,\n        \"size\":(elem.stat.size/1048576).toFixed(3) + \"Мb\",\n        \"editedAt\":elem.stat.created,\n    }\n})\n\nmsg.payload = NewMsg.payload;\nmsg.req =\"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1080,
        "wires": [
            [
                "1faf730dc135de6d"
            ]
        ]
    },
    {
        "id": "8914a42b4616d099",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "url": "/images/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1300,
        "wires": [
            [
                "65435a18dbd80012"
            ]
        ]
    },
    {
        "id": "f27612a8b6fec8a5",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 1300,
        "wires": []
    },
    {
        "id": "a2a3cb9c54ca6b3d",
        "type": "file in",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 820,
        "y": 1300,
        "wires": [
            [
                "a3cb9fb4108bf528"
            ]
        ]
    },
    {
        "id": "65e822e95975693e",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 1300,
        "wires": [
            [
                "452bb0dbe8b8a7cc"
            ]
        ]
    },
    {
        "id": "452bb0dbe8b8a7cc",
        "type": "change",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload[0].image",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1300,
        "wires": [
            [
                "a2a3cb9c54ca6b3d"
            ]
        ]
    },
    {
        "id": "a3cb9fb4108bf528",
        "type": "change",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "image/png",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers['access-control-allow-credentials']",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "headers.accept-ranges",
                "pt": "msg",
                "to": "bytes",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-xss-protection",
                "pt": "msg",
                "to": "1; mode=block",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-frame-options",
                "pt": "msg",
                "to": "SAMEORIGIN",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.nel",
                "pt": "msg",
                "to": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-dns-prefetch-control",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-download-options",
                "pt": "msg",
                "to": "noopen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 1300,
        "wires": [
            [
                "e05ed5f110a73ec3"
            ]
        ]
    },
    {
        "id": "e05ed5f110a73ec3",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "function",
        "func": "msg.headers = {\n    ...msg.headers,\n    ['x-content-type-options']: 'nosniff',\n    ['access-control-allow-credentials']: true,\n    ['cache-control']: 'public, max-age=14400',\n    ['cf-cache-status']: 'EXPIRED',\n    ['cf-ray']: '747ece538ba590b2-FRA',\n//report - to: { \"endpoints\": [{ \"url\": \"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=6FLrusuf%2B3JD%2By2hHTtEFI4LqfbHg6hE9OshVZ%2FGZHvRuKBMMPaZtmTvqedBYxS2H4SCN2hx0ulKIF4%2FetNCOLpZzbK46BXQfKwNg05NsEn3O4Uu6Oh5sk2s1A9i87oLs0t0yHlvVjNd\" }], \"group\": \"cf-nel\", \"max_age\": 604800 }\n//server: cloudflare\n    ['strict-transport-security']: 'max-age=15552000; includeSubDomains',\n    // ['link']: 'rel=\"shortcut icon\" href=\"\"',\n    ['Content-Security-Policy']:\"img-src 'none'\",\n    ['x-xss-protection']:' 1; mode = block'\n    //rel: \"shortcut icon\",\n    //vary: 'Origin,Accept-Encoding'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1300,
        "wires": [
            [
                "f27612a8b6fec8a5"
            ]
        ]
    },
    {
        "id": "65435a18dbd80012",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "c0b0251c40a3b95d",
        "name": "findProduct()",
        "func": "const productId = msg.req.params.id;\n\nmsg.payload = {\n    _id: objectid(productId)\n}\n\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 310,
        "y": 1300,
        "wires": [
            [
                "65e822e95975693e"
            ]
        ]
    },
    {
        "id": "10f6db36557cf78a",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "a36154d393038484",
        "name": "",
        "url": "/orders",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1460,
        "wires": [
            [
                "429013cfcc1d8e25"
            ]
        ]
    },
    {
        "id": "429013cfcc1d8e25",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "a36154d393038484",
        "name": "createOrder()",
        "func": "const { productId, quantity, weight, grinds, amount } = msg.req.body;\n\nmsg.payload = {\n    _id: objectid(),\n    // code\n    // userId,\n    // products: [{\n    //     productId: objectid(productId),\n    //     quantity,\n    //     characteristics: {\n    //         weight,\n    //         grinds,\n    //         amount\n    //     }\n    // }],\n    // totalPrice\n    date: new Date()\n}\nmsg.collection = \"orders\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 280,
        "y": 1460,
        "wires": [
            [
                "bcb99566c443c02f"
            ]
        ]
    },
    {
        "id": "bcb99566c443c02f",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "a36154d393038484",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 450,
        "y": 1460,
        "wires": [
            [
                "9531437ba3acd3b4"
            ]
        ]
    },
    {
        "id": "9531437ba3acd3b4",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "a36154d393038484",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1460,
        "wires": [
            [
                "23a66c4f0a1ee112"
            ]
        ]
    },
    {
        "id": "23a66c4f0a1ee112",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "a36154d393038484",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1460,
        "wires": []
    },
    {
        "id": "23534fe124dd2dcc",
        "type": "comment",
        "z": "6d691e6d89cccf80",
        "g": "a36154d393038484",
        "name": "Orders",
        "info": "",
        "x": 90,
        "y": 1400,
        "wires": []
    },
    {
        "id": "885a111e319fef0e",
        "type": "comment",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "Users",
        "info": "",
        "x": 90,
        "y": 1560,
        "wires": []
    },
    {
        "id": "21555cf0cd78d917",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "url": "/current",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1700,
        "wires": [
            [
                "bf4f667d3cdd0f26"
            ]
        ]
    },
    {
        "id": "bf8987158f7e3a62",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 1700,
        "wires": []
    },
    {
        "id": "bf4f667d3cdd0f26",
        "type": "subflow:d025cd27.f975",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "x": 235,
        "y": 1700,
        "wires": [
            [
                "eeb898509138a2cd"
            ],
            [
                "bf8987158f7e3a62"
            ]
        ],
        "l": false
    },
    {
        "id": "eeb898509138a2cd",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "setUser()",
        "func": "msg.payload = msg.payload[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1680,
        "wires": [
            [
                "bf8987158f7e3a62"
            ]
        ]
    },
    {
        "id": "6007c78f96e02eaf",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "url": "/users",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1800,
        "wires": [
            [
                "1f9acf1c045a9656"
            ]
        ]
    },
    {
        "id": "355de9816ad0fbb9",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "updateContactsUser()",
        "func": "const user = msg.payload[0];\nconst { firstName, lastName, phone } = msg.req.body;\n\nmsg.payload = {\n    $set: { \n        shipping: {\n            firstName,\n            lastName,\n            phone\n        }\n    }\n};\n\nmsg.query = {\n    _id: objectid(user._id)\n};\n\nmsg.collection = \"users\";\n\nreturn msg;\n\n\n\n    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "9a04e37fb3fb786e"
            ]
        ]
    },
    {
        "id": "9a04e37fb3fb786e",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 560,
        "y": 1780,
        "wires": [
            [
                "25afbcb8b3d179e9"
            ]
        ]
    },
    {
        "id": "25afbcb8b3d179e9",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 1800,
        "wires": []
    },
    {
        "id": "4273784fbebaf4c1",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "url": "/users-password",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1900,
        "wires": [
            [
                "0fcf0e68d1d1ab82"
            ]
        ]
    },
    {
        "id": "52d6555ff52a24fd",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1900,
        "wires": []
    },
    {
        "id": "523b2490d7107ffb",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "changePassword()",
        "func": "try {\n    const { oldPassword, newPassword } = msg.req.body;\n    const user = msg.payload[0];\n\n    const compare = await bcrypt.compare(oldPassword, user.password);\n\n    if (!compare) {\n        return [null, msg];\n    }\n\n    if (compare){\n        const hashPassword = await bcrypt.hash(newPassword, 10);\n\n        msg.payload = {\n            $set: {\n                password: hashPassword\n            }\n        };\n\n        msg.query = {\n            _id: objectid(user._id)\n        };\n\n        msg.collection = \"users\";\n    }\n\n    return [msg, null];\n\n} catch (error) {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 410,
        "y": 1880,
        "wires": [
            [
                "a3eb40901b234f7b"
            ],
            [
                "6c6a762203457813"
            ]
        ]
    },
    {
        "id": "0fcf0e68d1d1ab82",
        "type": "subflow:d025cd27.f975",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "x": 275,
        "y": 1900,
        "wires": [
            [
                "523b2490d7107ffb"
            ],
            [
                "52d6555ff52a24fd"
            ]
        ],
        "l": false
    },
    {
        "id": "6c6a762203457813",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "setError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Passwords do not match\"\n}\n\nmsg.statusCode = 400;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1900,
        "wires": [
            [
                "52d6555ff52a24fd"
            ]
        ]
    },
    {
        "id": "a3eb40901b234f7b",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 600,
        "y": 1860,
        "wires": [
            [
                "52d6555ff52a24fd"
            ]
        ]
    },
    {
        "id": "1f9acf1c045a9656",
        "type": "subflow:d025cd27.f975",
        "z": "6d691e6d89cccf80",
        "g": "b0042c1a4b8b65f4",
        "name": "",
        "x": 215,
        "y": 1800,
        "wires": [
            [
                "355de9816ad0fbb9"
            ],
            [
                "25afbcb8b3d179e9"
            ]
        ],
        "l": false
    },
    {
        "id": "dd7f82df0906789f",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "name": "",
        "url": "/users",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1620,
        "wires": [
            [
                "ace0c0a17958fd49"
            ]
        ]
    },
    {
        "id": "2503d74b6ed7f764",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 1620,
        "wires": []
    },
    {
        "id": "ace0c0a17958fd49",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "name": "getUsers()",
        "func": "msg.payload = {}\n\nmsg.collection = \"users\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1620,
        "wires": [
            [
                "3d5eac365b41e57e"
            ]
        ]
    },
    {
        "id": "3d5eac365b41e57e",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "2503d74b6ed7f764"
            ]
        ]
    },
    {
        "id": "55cf4223ab2ecf44",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "name": "",
        "url": "/admin",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 2100,
        "wires": [
            [
                "3cbc17f39da875de"
            ]
        ]
    },
    {
        "id": "3bd377e068e3e13e",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 2100,
        "wires": []
    },
    {
        "id": "83e3d5e678eb53d2",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 770,
        "y": 2040,
        "wires": [
            [
                "3bd377e068e3e13e"
            ]
        ]
    },
    {
        "id": "3cbc17f39da875de",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "name": "findEmail()",
        "func": "const { email } = msg.req.body;\n\nmsg.payload = {\n    email\n}\nmsg.collection = \"users\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2100,
        "wires": [
            [
                "4bc0756831923ce8"
            ]
        ]
    },
    {
        "id": "4bc0756831923ce8",
        "type": "link call",
        "z": "6d691e6d89cccf80",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 2100,
        "wires": [
            [
                "22522d014311d395"
            ]
        ]
    },
    {
        "id": "22522d014311d395",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "name": "createAdmin()",
        "func": "const isEmailExist = msg.payload.length !== 0;\n\nif (!isEmailExist) {\n    const { name, email, password, role = \"admin\" } = msg.req.body;\n    const passwordHash = await bcrypt.hash(password, 10);\n\n    msg.payload = {\n        _id: objectid(),\n        name,\n        email,\n        password: passwordHash,\n        orders: [],\n        shipping: {\n            firstName: \"\",\n            lastName: \"\",\n            phone: \"\"\n        },\n        role, // only admin OR user\n        token: \"\" \n    }\n    msg.collection = \"users\";\n\n    msg.statusCode = 200;\n    return [msg, null];\n}\n\nif (isEmailExist){\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 600,
        "y": 2100,
        "wires": [
            [
                "83e3d5e678eb53d2"
            ],
            [
                "13f1be8c9c78b930"
            ]
        ]
    },
    {
        "id": "13f1be8c9c78b930",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "name": "setError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Email is already in use\"\n}\n\nmsg.statusCode = 409;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2160,
        "wires": [
            [
                "3bd377e068e3e13e"
            ]
        ]
    },
    {
        "id": "f9a0f82c11903966",
        "type": "function",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "sendResponse()",
        "func": "const isEmailExist = msg.payload.length !== 0;\n\n\nif (!isEmailExist){\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"Forbidden!\"\n    }\n    \n    msg.statusCode = 401;\n    return [null, msg]\n} else {\n    msg.req.user = msg.payload\n    node.warn(msg.res.user);\n    msg.payload = msg.oldpayload\n    delete msg.oldpayload\n    return[msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 160,
        "wires": [
            [],
            [
                "9fd58a423081395a"
            ]
        ]
    },
    {
        "id": "9fd58a423081395a",
        "type": "http response",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 200,
        "wires": []
    },
    {
        "id": "b9d241f7c21a84da",
        "type": "function",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "checkToken()",
        "func": "const result = dotenv.config();\nconst { SECRET_KEY } = result.parsed;\n\nif (msg.req.cookies.user_token) {\n    msg.oldpayload = msg.payload\n\n    try {\n        const { id } = jwt.verify(msg.req.cookies.user_token, SECRET_KEY);\n        msg.collection = \"users\";\n        msg.payload = {\n            _id: objectid(id)\n        }\n        return [msg, null];\n\n    } catch (error) {\n        node.warn(error.message)\n    };\n} else {\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "dotenv",
                "module": "dotenv"
            }
        ],
        "x": 170,
        "y": 220,
        "wires": [
            [
                "965b95ad54b9dbd0"
            ],
            [
                "68cc7cedd1b416bf"
            ]
        ]
    },
    {
        "id": "68cc7cedd1b416bf",
        "type": "function",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "sendError()",
        "func": "msg.payload = {\n    success: false,\n    message: \"Forbidden\"\n}\n\nmsg.statusCode = 401;\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "063ccd6fdf1fd599"
            ]
        ]
    },
    {
        "id": "063ccd6fdf1fd599",
        "type": "http response",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 220,
        "wires": []
    },
    {
        "id": "965b95ad54b9dbd0",
        "type": "link call",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "f9a0f82c11903966"
            ]
        ]
    },
    {
        "id": "da27471bf65208ff",
        "type": "comment",
        "z": "572dfaa9458e5333",
        "g": "f88877fc8db92035",
        "name": "SubFlow  auth (NOT work)",
        "info": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "02867b04f323983e",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "41ce73f80f967f2c"
            ]
        ]
    },
    {
        "id": "41ce73f80f967f2c",
        "type": "file in",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "read file",
        "filename": ".node-red\\projects\\masterkava_back\\file.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 100,
        "wires": [
            [
                "7d745f91f4ac681a"
            ]
        ]
    },
    {
        "id": "7d745f91f4ac681a",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "debug 211",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "1fd66a7ed16cf866",
        "type": "file",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "append file",
        "filename": ".node-red\\projects\\masterkava_back\\file1.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "af9e5bccd86b36de"
            ]
        ]
    },
    {
        "id": "1eb1841fc3df6a8e",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "89c2e450b846c7c9"
            ]
        ]
    },
    {
        "id": "af9e5bccd86b36de",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "debug 212",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "cc98cb3f9f3ee8d6",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "set msg.payload",
        "func": "msg.payload = \"add\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4f6b79dc7a07448b",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "Read Files",
        "info": "Path: set a path from \"C:/Users/DELL/\"\n",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "5b2452df50fbf1b9",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "Append/Create/Delete Files",
        "info": "msg.payload = \"a text that you want to add\";\n",
        "x": 180,
        "y": 220,
        "wires": []
    },
    {
        "id": "89c2e450b846c7c9",
        "type": "change",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "1fd66a7ed16cf866"
            ]
        ]
    },
    {
        "id": "07525484e994f095",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "name": "function 2",
        "func": "// const objectId = global.get('objectid');\n// const newId = objectId().toString();\n\nmsg.payload = {\n    _id: objectid(), \n    name: 'test4', \n    deleted: false\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "88df837133eddd5d"
            ]
        ]
    },
    {
        "id": "28f6603d256eb461",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "07525484e994f095"
            ]
        ]
    },
    {
        "id": "88df837133eddd5d",
        "type": "mongodb out",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "mongodb": "2272c92dc80bcb38",
        "name": "",
        "collection": "products",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 600,
        "y": 460,
        "wires": []
    },
    {
        "id": "9497ff1729fe73e6",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "name": "Work with MongoDB",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "dcac4fe4170f8a1a",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "ad62655d84b9aff1"
            ]
        ]
    },
    {
        "id": "b4519518901a3b1b",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 620,
        "wires": []
    },
    {
        "id": "ad62655d84b9aff1",
        "type": "subflow:a097c62b59a93fa5",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "",
        "x": 330,
        "y": 620,
        "wires": [
            [
                "b4519518901a3b1b"
            ]
        ]
    },
    {
        "id": "9b18d0692c3da728",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "Subflows",
        "info": "",
        "x": 120,
        "y": 580,
        "wires": []
    },
    {
        "id": "331eaafb44d0fdc5",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "a129d65a5e8a09de"
            ]
        ]
    },
    {
        "id": "a129d65a5e8a09de",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "function 3",
        "func": "msg.payload = {\n    $set: { name: \"updadfsdgsdte\" }\n};\n\nmsg.query = { \n    _id: objectid('64308f9153446dfc20000013') \n};\n\n// msg.payload = {\n//     query: { _id: objectid('64308f9153446dfc20000013') },\n//     update: { $set: { name: \"update\" } }\n// };\n\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 800,
        "wires": [
            [
                "eb3ac15f633f1fc7"
            ]
        ]
    },
    {
        "id": "eb3ac15f633f1fc7",
        "type": "link call",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 800,
        "wires": [
            [
                "024dd4cd90e32b52"
            ]
        ]
    },
    {
        "id": "024dd4cd90e32b52",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 800,
        "wires": []
    },
    {
        "id": "8e604cd11c5a9dcb",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "716ef4768a93e2e0"
            ]
        ]
    },
    {
        "id": "716ef4768a93e2e0",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "function 4",
        "func": "msg.payload = {\n    _id: objectid(),\n    name: 'test4',\n    deleted: false\n};\n\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 860,
        "wires": [
            [
                "a691858b679166fa"
            ]
        ]
    },
    {
        "id": "a691858b679166fa",
        "type": "link call",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 860,
        "wires": [
            [
                "ea801f1f8aa87cf7"
            ]
        ]
    },
    {
        "id": "ea801f1f8aa87cf7",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 860,
        "wires": []
    },
    {
        "id": "0edd863d78f53e53",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "MongoDB ",
        "info": "",
        "x": 120,
        "y": 740,
        "wires": []
    },
    {
        "id": "29fd809dc62fe637",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1040,
        "wires": [
            [
                "36073d925a2cd8ef"
            ]
        ]
    },
    {
        "id": "ae82a760f512d716",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "debug 213",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1040,
        "wires": []
    },
    {
        "id": "36073d925a2cd8ef",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "get path",
        "func": "// Get the absolute path of the current directory\nconst currentDir = path.resolve('');\n\n// Log the current directory to the Node-RED console\nnode.warn(currentDir);\n\n// Return the current directory as the output message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "ae82a760f512d716"
            ]
        ]
    },
    {
        "id": "ab7126da435ada47",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "Get a path of current directory",
        "info": "",
        "x": 180,
        "y": 980,
        "wires": []
    },
    {
        "id": "a310f231786a1a62",
        "type": "fs-mkdir",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "",
        "purpose": "reg",
        "path": "path",
        "pathType": "msg",
        "foldername": "payload",
        "foldernameType": "msg",
        "recursive": true,
        "exists": true,
        "prefix": "",
        "prefixType": "str",
        "mode": "777",
        "property": "payload",
        "propertyType": "msg",
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "8639587e5b6a68a8"
            ]
        ]
    },
    {
        "id": "d3ce801aa9c8eae8",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "folder",
        "payloadType": "str",
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "aa246705f235df7c"
            ]
        ]
    },
    {
        "id": "8639587e5b6a68a8",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1220,
        "wires": []
    },
    {
        "id": "aa246705f235df7c",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "set path",
        "func": "const currentDir = path.resolve('');\nmsg.path = currentDir + \"/data\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 260,
        "y": 1220,
        "wires": [
            [
                "a310f231786a1a62"
            ]
        ]
    },
    {
        "id": "458063eab4db9cad",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "Create folder",
        "info": "",
        "x": 130,
        "y": 1160,
        "wires": []
    },
    {
        "id": "4df507d9416797f1",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "1013a31fe9ac9265",
        "name": "debug 222",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1400,
        "wires": []
    },
    {
        "id": "7508642bfaa1fa4f",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "1013a31fe9ac9265",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "d672b0f82d3d988e"
            ]
        ]
    },
    {
        "id": "d672b0f82d3d988e",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "1013a31fe9ac9265",
        "name": "hashAndComparePassword()",
        "func": "const passwordHash = await bcrypt.hash(\"1224\", 10);\nconst compare = await bcrypt.compare(\"1224\", passwordHash)\n\nmsg.payload = {\n    passwordHash,\n    compare\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "4df507d9416797f1"
            ]
        ]
    },
    {
        "id": "c3b222eeaf84350c",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "1013a31fe9ac9265",
        "name": "Hash and compare a password",
        "info": "",
        "x": 190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "e8a0ceab6e302650",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "e629b0fe5d3c5f61",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1580,
        "wires": [
            [
                "c4933cdf45a3018a"
            ]
        ]
    },
    {
        "id": "74f88ff6e1ce6269",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "e629b0fe5d3c5f61",
        "name": "debug 225",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c4933cdf45a3018a",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "e629b0fe5d3c5f61",
        "name": "getFromEnv()",
        "func": "const result = dotenv.config();\nconst { SECRET_KEY } = result.parsed;\n\nmsg.payload = SECRET_KEY;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "dotenv",
                "module": "dotenv"
            }
        ],
        "x": 300,
        "y": 1580,
        "wires": [
            [
                "74f88ff6e1ce6269"
            ]
        ]
    },
    {
        "id": "57dfc1ce96cb73b3",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "e629b0fe5d3c5f61",
        "name": "Get value from .env",
        "info": "",
        "x": 150,
        "y": 1520,
        "wires": []
    },
    {
        "id": "6fef0c19e928e81b",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "7579215f712a4ebb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "e7a5b9241e278143"
            ]
        ]
    },
    {
        "id": "1cd34379efe523d3",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "7579215f712a4ebb",
        "name": "debug 226",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e7a5b9241e278143",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "7579215f712a4ebb",
        "name": "workWithToken()",
        "func": "const result = dotenv.config();\nconst { SECRET_KEY } = result.parsed;\n\nconst payload = {\n    id: \"32298928\"\n}\n\nconst token = jwt.sign(payload, SECRET_KEY, {expiresIn: \"5m\"});\nconst decodedToken = jwt.decode(token);\nconst invalidToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMyMjk4OTI4IiwiaWF0IjoxNjgzMzEzMzg0LCJleHAiOjE2ODMzMTM2ODR9.B1znTO29gtwSXxyuDwFdPNwOM3d3HOWiN63kO5cu4\"\n\ntry {\n    const { id } = jwt.verify(token, SECRET_KEY);\n    // const { id } = jwt.verify(invalidToken, SECRET_KEY);\n    node.warn(id);\n\n} catch (error) {\n    node.warn(error.message)\n};\n\nmsg.payload = {\n    token, \n    decodedToken\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "dotenv",
                "module": "dotenv"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 330,
        "y": 1760,
        "wires": [
            [
                "1cd34379efe523d3"
            ]
        ]
    },
    {
        "id": "cb6a89ccdd6b626d",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "7579215f712a4ebb",
        "name": "A work with jsonwebtoken",
        "info": "",
        "x": 170,
        "y": 1700,
        "wires": []
    },
    {
        "id": "6d73e6d9.6a7f88",
        "type": "inject",
        "z": "fcd0e09e.2ef47",
        "name": "Get payment status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "a3e397a3.90c2f8"
            ]
        ]
    },
    {
        "id": "a3e397a3.90c2f8",
        "type": "function",
        "z": "fcd0e09e.2ef47",
        "name": "Prepare payment status request",
        "func": "\nconst public_key = 'sandbox_i84915551152';\nconst private_key = 'sandbox_lixXdjBXphEfcWIsSx07Ed5getyKGA15iXzncE1I';\n\nconst liqpay = new LiqPay(public_key, private_key);\n\nconst order_id = 'order_id_12345'; // Replace with the actual order_id\n\nconst request_data = {\n    'action': 'status',\n    'version': '3',\n    'public_key': public_key,\n    'order_id': order_id\n};\n\nconst encoded_request_data = Buffer.from(JSON.stringify(request_data)).toString('base64');\n\nconst str_to_sign = private_key + encoded_request_data + private_key;\nconst signature = crypto.createHash('sha1').update(str_to_sign).digest('base64');\n\nmsg.payload = {\n    'data': encoded_request_data,\n    'signature': signature\n};\n\nmsg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LiqPay",
                "module": "liqpay"
            },
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 360,
        "y": 140,
        "wires": [
            [
                "1d9a9262.2a516e"
            ]
        ]
    },
    {
        "id": "1d9a9262.2a516e",
        "type": "http request",
        "z": "fcd0e09e.2ef47",
        "name": "Request payment status",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.liqpay.ua/api/request",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 140,
        "wires": [
            [
                "f1b8a2a6.9d7f4"
            ]
        ]
    },
    {
        "id": "f1b8a2a6.9d7f4",
        "type": "function",
        "z": "fcd0e09e.2ef47",
        "name": "Handle payment status response",
        "func": "const response = msg.payload;\n\nif (response.status === 'success') {\n    const payment_status = response.result.status;\n    console.log('Payment status:', payment_status);\n    // Handle the payment status here (e.g., update your database, display a message, etc.)\n} else {\n    console.error('Error fetching payment status:', response);\n    // Handle the error here (e.g., display an error message, etc.)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 140,
        "wires": [
            [
                "d9b27c23.19057"
            ]
        ]
    },
    {
        "id": "d9b27c23.19057",
        "type": "debug",
        "z": "fcd0e09e.2ef47",
        "name": "Payment status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 140,
        "wires": []
    },
    {
        "id": "ea318bd92bf04b4e",
        "type": "http response",
        "z": "fcd0e09e.2ef47",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "45aec5f7fda4d906",
        "type": "function",
        "z": "fcd0e09e.2ef47",
        "name": "function 322",
        "func": "const public_key = 'sandbox_i84915551152';\nconst private_key = 'sandbox_lixXdjBXphEfcWIsSx07Ed5getyKGA15iXzncE1I';\n\nconst liqpay = new LiqPay(public_key, private_key);\n\nconst payment_data = {\n    'action': 'pay',\n    'amount': '300',\n    'currency': 'UAH',\n    'description': 'Payment for services',\n    'order_id': 'order_id_12345',\n    'version': '3',\n    'public_key': public_key, \n    'sandbox': '1'\n};\n\nconst encoded_payment_data = Buffer.from(JSON.stringify(payment_data)).toString('base64');\n\nconst str_to_sign = private_key + encoded_payment_data + private_key;\nconst signature = crypto.createHash('sha1').update(str_to_sign).digest('base64');\n\nmsg.payload = {\n    'data': encoded_payment_data,\n    'signature': signature\n};\n\nnode.send(msg);\n\nreturn msg;\n\n\n\n\n\n// const order_id = 'order_id_12345'; // Replace with the actual order_id\n\n// const request_data = {\n//     'action': 'status',\n//     'version': '3',\n//     'public_key': public_key,\n//     'order_id': order_id\n// };\n\n// const encoded_request_data = Buffer.from(JSON.stringify(request_data)).toString('base64');\n\n// const str_to_sign = private_key + encoded_request_data + private_key;\n// const signature = crypto.createHash('sha1').update(str_to_sign).digest('base64');\n\n// msg.payload = {\n//     'data': encoded_request_data,\n//     'signature': signature\n// };\n\n// msg.headers = {\n//     'Content-Type': 'application/x-www-form-urlencoded',\n//     'Accept': 'application/json'\n// };\n\n// return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "LiqPay",
                "module": "liqpay"
            },
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 570,
        "y": 60,
        "wires": [
            [
                "ea318bd92bf04b4e"
            ]
        ]
    },
    {
        "id": "02f4e83947f81121",
        "type": "http in",
        "z": "fcd0e09e.2ef47",
        "name": "",
        "url": "/liqpay",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f55b2ea76c0293d0",
        "type": "inject",
        "z": "fcd0e09e.2ef47",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "45aec5f7fda4d906"
            ]
        ]
    },
    {
        "id": "a9fb567ad07dc66a",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD find",
        "links": [],
        "x": 125,
        "y": 60,
        "wires": [
            [
                "2cbd6b0583706522"
            ]
        ]
    },
    {
        "id": "82a088390a0e13bb",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 60,
        "wires": []
    },
    {
        "id": "2cbd6b0583706522",
        "type": "mongodb in",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD find",
        "collection": "",
        "operation": "find",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "82a088390a0e13bb"
            ]
        ]
    },
    {
        "id": "d66b320450918147",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD aggregate",
        "links": [],
        "x": 125,
        "y": 120,
        "wires": [
            [
                "d1982e39382e3370"
            ]
        ]
    },
    {
        "id": "be6649ec5b1c6c0e",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 120,
        "wires": []
    },
    {
        "id": "d1982e39382e3370",
        "type": "mongodb in",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD aggregate",
        "collection": "",
        "operation": "aggregate",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "be6649ec5b1c6c0e"
            ]
        ]
    },
    {
        "id": "1b4a93743b4cb585",
        "type": "mongodb out",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD insert",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 270,
        "y": 200,
        "wires": []
    },
    {
        "id": "11c9729c152a736b",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD insert",
        "links": [],
        "x": 125,
        "y": 200,
        "wires": [
            [
                "1b4a93743b4cb585",
                "78487177228b9424"
            ]
        ]
    },
    {
        "id": "78487177228b9424",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 235,
        "y": 240,
        "wires": []
    },
    {
        "id": "37fd6e76c8c5cf02",
        "type": "mongodb out",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD update",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "update",
        "x": 280,
        "y": 300,
        "wires": []
    },
    {
        "id": "6e02acf20c7c434c",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD update",
        "links": [
            "159f20af26b27591"
        ],
        "x": 125,
        "y": 300,
        "wires": [
            [
                "37fd6e76c8c5cf02",
                "a9bea4a92fcfa3c1"
            ]
        ]
    },
    {
        "id": "a9bea4a92fcfa3c1",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 235,
        "y": 340,
        "wires": []
    },
    {
        "id": "1893ba3cf8670b46",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD count",
        "links": [],
        "x": 135,
        "y": 400,
        "wires": [
            [
                "522c4fea30675a88"
            ]
        ]
    },
    {
        "id": "f6f164110b64c323",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 445,
        "y": 400,
        "wires": []
    },
    {
        "id": "522c4fea30675a88",
        "type": "mongodb in",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD count",
        "collection": "",
        "operation": "count",
        "x": 270,
        "y": 400,
        "wires": [
            [
                "f6f164110b64c323"
            ]
        ]
    },
    {
        "id": "1787f64d70c757a1",
        "type": "catch",
        "z": "5625818d4797c40c",
        "name": "",
        "scope": [
            "1b4a93743b4cb585"
        ],
        "uncaught": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "a31b78cb333e5754"
            ]
        ]
    },
    {
        "id": "a31b78cb333e5754",
        "type": "function",
        "z": "5625818d4797c40c",
        "name": "Handle Error",
        "func": "if (msg.error.message.includes(\"E11000 duplicate key error\")) {\n    msg.payload = { error: true, message: \"This email already exists in the database.\" };\n} else {\n    msg.payload = { error: false };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "4dd80a5342ed9238"
            ]
        ]
    },
    {
        "id": "4dd80a5342ed9238",
        "type": "debug",
        "z": "5625818d4797c40c",
        "name": "debug 221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 100,
        "wires": []
    }
]