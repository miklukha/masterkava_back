[
    {
        "id": "6d691e6d89cccf80",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "254289433a84914b",
        "type": "tab",
        "label": "Operations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5625818d4797c40c",
        "type": "tab",
        "label": "Mongo linking",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "572dfaa9458e5333",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "27e958a26f8b472d",
        "type": "tab",
        "label": "Help",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a097c62b59a93fa5",
        "type": "subflow",
        "name": "getProducts",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "6b730fd27d3147a8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 80,
                "wires": [
                    {
                        "id": "9378ab793d93f9a7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "be0e91eaeda9e45d",
        "type": "subflow",
        "name": "checkAuthFM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "8afec29839d2345a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 100,
                "wires": [
                    {
                        "id": "8afec29839d2345a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "font-awesome/fa-check-square"
    },
    {
        "id": "9f43ceecbe5c8618",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "02867b04f323983e",
            "41ce73f80f967f2c",
            "7d745f91f4ac681a",
            "4f6b79dc7a07448b"
        ],
        "x": 34,
        "y": 19
    },
    {
        "id": "10f169318ad1a329",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1fd66a7ed16cf866",
            "1eb1841fc3df6a8e",
            "af9e5bccd86b36de",
            "cc98cb3f9f3ee8d6",
            "5b2452df50fbf1b9",
            "89c2e450b846c7c9"
        ],
        "x": 34,
        "y": 179
    },
    {
        "id": "b7f4d86114a55d70",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "07525484e994f095",
            "28f6603d256eb461",
            "88df837133eddd5d",
            "9497ff1729fe73e6"
        ],
        "x": 34,
        "y": 379
    },
    {
        "id": "1c2202b3413ad6f7",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dcac4fe4170f8a1a",
            "b4519518901a3b1b",
            "ad62655d84b9aff1",
            "9b18d0692c3da728"
        ],
        "x": 34,
        "y": 539
    },
    {
        "id": "024c1ba1dc39c40d",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "331eaafb44d0fdc5",
            "a129d65a5e8a09de",
            "eb3ac15f633f1fc7",
            "024dd4cd90e32b52",
            "8e604cd11c5a9dcb",
            "716ef4768a93e2e0",
            "a691858b679166fa",
            "ea801f1f8aa87cf7",
            "0edd863d78f53e53"
        ],
        "x": 34,
        "y": 699
    },
    {
        "id": "2e23327e0aa0042c",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "29fd809dc62fe637",
            "ae82a760f512d716",
            "36073d925a2cd8ef",
            "ab7126da435ada47"
        ],
        "x": 34,
        "y": 939
    },
    {
        "id": "46754a6258cacf85",
        "type": "group",
        "z": "27e958a26f8b472d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a310f231786a1a62",
            "d3ce801aa9c8eae8",
            "8639587e5b6a68a8",
            "aa246705f235df7c",
            "458063eab4db9cad"
        ],
        "x": 34,
        "y": 1119
    },
    {
        "id": "2272c92dc80bcb38",
        "type": "mongodb",
        "hostname": "cluster0.smbbcpt.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "",
        "port": "27017",
        "db": "masterkava",
        "name": ""
    },
    {
        "id": "9378ab793d93f9a7",
        "type": "link call",
        "z": "a097c62b59a93fa5",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6b730fd27d3147a8",
        "type": "function",
        "z": "a097c62b59a93fa5",
        "name": "function 5",
        "func": "msg.payload = {\n    deleted: false\n}\n\nmsg.collection = \"products\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9378ab793d93f9a7"
            ]
        ]
    },
    {
        "id": "8afec29839d2345a",
        "type": "function",
        "z": "be0e91eaeda9e45d",
        "name": "checker",
        "func": "const headers = msg.req.rawHeaders\nconst index = headers.indexOf(\"referer\")\n\nif (headers[index + 1] == 'https://testforce.tadiranforce.co.il/') {\n    return [msg, null]\n} else {\n    msg.statusCode = 401;\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"Forbidden!\"\n    }\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            [
                "152b98ae70cf8848"
            ],
            [
                "76cde29eeec8e2da",
                "152b98ae70cf8848"
            ]
        ],
        "icon": "font-awesome/fa-check-square-o"
    },
    {
        "id": "76cde29eeec8e2da",
        "type": "function",
        "z": "be0e91eaeda9e45d",
        "name": "send error",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    \"success\": false,\n    \"error\": \"Forbidden!\"\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "ad95c846a2724046"
            ]
        ]
    },
    {
        "id": "ad95c846a2724046",
        "type": "http response",
        "z": "be0e91eaeda9e45d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "152b98ae70cf8848",
        "type": "debug",
        "z": "be0e91eaeda9e45d",
        "name": "FM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "3c0098806f90729c",
        "type": "http in",
        "z": "6d691e6d89cccf80",
        "name": "",
        "url": "/photo",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "9de426dba07efafb",
                "647a9d87cf5fe0a4"
            ]
        ]
    },
    {
        "id": "6e9fd355cecc207d",
        "type": "http response",
        "z": "6d691e6d89cccf80",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 920,
        "wires": []
    },
    {
        "id": "9de426dba07efafb",
        "type": "function",
        "z": "6d691e6d89cccf80",
        "name": "function 14",
        "func": "const tempDir = path.resolve('') + \"/temp\";\nconst multerConfig = multer.diskStorage({\n    destination: tempDir,\n    filename: (req, file, cb) => {\n        cb(null, file.originalname)\n    }\n});\n\nconst upload = multer({\n    storage: multerConfig\n}).single(\"photo\");\n\nupload(msg.req, msg.res, function (err) {\n    if (err) {\n        msg.payload = \"Error uploading file: \" + err.message;\n        return node.send([null, msg]);\n    }\n\n    msg.payload = \"File uploaded successfully\";\n    return node.send([msg, null]);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "multer",
                "module": "multer"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 370,
        "y": 920,
        "wires": [
            [
                "6e9fd355cecc207d",
                "3b94e3d977cbb618"
            ]
        ]
    },
    {
        "id": "3b94e3d977cbb618",
        "type": "debug",
        "z": "6d691e6d89cccf80",
        "name": "debug 216",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 860,
        "wires": []
    },
    {
        "id": "647a9d87cf5fe0a4",
        "type": "debug",
        "z": "6d691e6d89cccf80",
        "name": "debug 219",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 860,
        "wires": []
    },
    {
        "id": "1b608ea8d239dee8",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/categories",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "b32186c298b6a565"
            ]
        ]
    },
    {
        "id": "b32186c298b6a565",
        "type": "function",
        "z": "254289433a84914b",
        "name": "createCategory()",
        "func": "const {label, name} = msg.req.body;\n\nmsg.payload = {\n    _id: objectid(),\n    label,\n    name,\n    createdAt: new Date()\n}\nmsg.collection = \"categories\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "ab0eb788e836d245"
            ]
        ]
    },
    {
        "id": "ab0eb788e836d245",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 550,
        "y": 300,
        "wires": [
            [
                "25a3577fe42b0ec0"
            ]
        ]
    },
    {
        "id": "25a3577fe42b0ec0",
        "type": "function",
        "z": "254289433a84914b",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            [
                "3a5750cd33a5a065"
            ]
        ]
    },
    {
        "id": "3a5750cd33a5a065",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 300,
        "wires": []
    },
    {
        "id": "170895c23d39ce6b",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/products/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "27a07b0c446e7476"
            ]
        ]
    },
    {
        "id": "27a07b0c446e7476",
        "type": "function",
        "z": "254289433a84914b",
        "name": "getProductById()",
        "func": "const productId = msg.req.params.id;\n\n// msg.payload = {\n//     _id: objectid(productId)\n// }\n\n// msg.collection = \"products\";\n// return msg;\nconst pipeline = [\n    {\n        $match: {\n            _id: objectid(productId)\n        }\n    },\n    {\n        $lookup: {\n            from: \"categories\",\n            localField: \"category\",\n            foreignField: \"_id\",\n            as: \"category_doc\",\n        }\n    },\n    {\n        $unwind: \"$category_doc\"\n    },\n    {\n        $project: {\n            _id: 1,\n            name: 1,\n            code: 1,\n            availability: 1,\n            category: \"$category_doc.name\",\n            characteristics: 1,\n            price: 1,\n            description: 1,\n            roastLevel: 1,\n            countries: 1,\n            image: 1,\n            deleted: 1\n        }\n    }\n];\n\nmsg.payload = pipeline;\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "128b7aa59df6509f"
            ]
        ]
    },
    {
        "id": "bc79b5d18c9e474c",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "2cbcc0d023ba5516",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/categories",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "eaa7eadd368d976c"
            ]
        ]
    },
    {
        "id": "eaa7eadd368d976c",
        "type": "function",
        "z": "254289433a84914b",
        "name": "getCategories()",
        "func": "msg.payload = {}\n\nmsg.collection = \"categories\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "5c6ada2370743b24"
            ]
        ]
    },
    {
        "id": "5c6ada2370743b24",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "a9fb567ad07dc66a"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "8b04948349b7103e"
            ]
        ]
    },
    {
        "id": "8b04948349b7103e",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 240,
        "wires": []
    },
    {
        "id": "10f6db36557cf78a",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/orders",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "429013cfcc1d8e25"
            ]
        ]
    },
    {
        "id": "429013cfcc1d8e25",
        "type": "function",
        "z": "254289433a84914b",
        "name": "createOrder()",
        "func": "const { productId, quantity, weight, grinds, amount } = msg.req.body;\n\nmsg.payload = {\n    _id: objectid(),\n    // code\n    // userId,\n    // products: [{\n    //     productId: objectid(productId),\n    //     quantity,\n    //     characteristics: {\n    //         weight,\n    //         grinds,\n    //         amount\n    //     }\n    // }],\n    // totalPrice\n    date: new Date()\n}\nmsg.collection = \"orders\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "bcb99566c443c02f"
            ]
        ]
    },
    {
        "id": "bcb99566c443c02f",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 550,
        "y": 360,
        "wires": [
            [
                "9531437ba3acd3b4"
            ]
        ]
    },
    {
        "id": "9531437ba3acd3b4",
        "type": "function",
        "z": "254289433a84914b",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 360,
        "wires": [
            [
                "23a66c4f0a1ee112"
            ]
        ]
    },
    {
        "id": "23a66c4f0a1ee112",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 360,
        "wires": []
    },
    {
        "id": "bb400da8d1bae39f",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/users",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "d24af595cff3f770"
            ]
        ]
    },
    {
        "id": "d24af595cff3f770",
        "type": "function",
        "z": "254289433a84914b",
        "name": "createUser()",
        "func": "const { name, email, role } = msg.req.body;\n\nmsg.payload = {\n    _id: objectid(),\n    name,\n    email, \n    // orders: [],\n    // shipping: [{\n    //     name,\n    //     surname,\n    //     phone\n    // }],\n    role // only admin OR user\n}\nmsg.collection = \"users\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "063d6d903ea662b9"
            ]
        ]
    },
    {
        "id": "063d6d903ea662b9",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "350f91f1c1aecd7d"
            ]
        ]
    },
    {
        "id": "350f91f1c1aecd7d",
        "type": "function",
        "z": "254289433a84914b",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 420,
        "wires": [
            [
                "7f6f98f0d2c1c4b8"
            ]
        ]
    },
    {
        "id": "7f6f98f0d2c1c4b8",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "bdf8ad5f3c620554",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/products",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 620,
        "wires": [
            [
                "551eb579ca278c53"
            ]
        ]
    },
    {
        "id": "dfc64f6ce7cd4348",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 620,
        "wires": []
    },
    {
        "id": "a003343850834325",
        "type": "function",
        "z": "254289433a84914b",
        "name": "function 6",
        "func": "const { category } = msg.req.body;\n\nconst pipeline = [\n    {\n        $match: {\n            _id: objectid(category)\n        }\n    }\n];\n\nmsg.payload = pipeline;\nmsg.collection = \"categories\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 100,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "990a914615270d98",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "9c978ba2294068e8",
        "type": "catch",
        "z": "254289433a84914b",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 60,
        "wires": [
            [
                "3c195631ac636fd4"
            ]
        ]
    },
    {
        "id": "3c195631ac636fd4",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error.message",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "5275344861a08fc6",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "d66b320450918147"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 430,
        "y": 620,
        "wires": [
            [
                "2357aed35a875667"
            ]
        ]
    },
    {
        "id": "551eb579ca278c53",
        "type": "function",
        "z": "254289433a84914b",
        "name": "getProducts()",
        "func": "const pipeline = [\n    {\n        $match: {\n            deleted: false\n        }\n    },\n    {\n        $lookup: {\n            from: \"categories\",\n            localField: \"category\",\n            foreignField: \"_id\",\n            as: \"category_doc\",\n        }\n    },\n    {\n        $unwind: \"$category_doc\"\n    },\n    {\n        $project: {\n            _id: 1,\n            name: 1,\n            code: 1,\n            availability: 1,\n            category: {\n                name: \"$category_doc.name\",\n                label: \"$category_doc.label\"\n            },\n            characteristics: 1,\n            price: 1,\n            description: 1,\n            roastLevel: 1,\n            countries: 1,\n            image: 1,\n            deleted: 1\n        }\n    }\n];\n\nmsg.payload = pipeline;\nmsg.collection = \"products\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 620,
        "wires": [
            [
                "5275344861a08fc6"
            ]
        ]
    },
    {
        "id": "128b7aa59df6509f",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "d66b320450918147"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "bc79b5d18c9e474c"
            ]
        ]
    },
    {
        "id": "54dd30369781e6e4",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1900,
        "wires": []
    },
    {
        "id": "2357aed35a875667",
        "type": "switch",
        "z": "254289433a84914b",
        "name": "",
        "property": "req.query.sort",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "price_asc",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "price_desc",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "popular",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "category",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "country",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "price",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 590,
        "y": 620,
        "wires": [
            [
                "37b0a51897821d8e"
            ],
            [
                "bf23b5b6a37925a4"
            ],
            [
                "60f1c36683a9219a"
            ],
            [
                "9e97302fa04b7641"
            ],
            [
                "2824b734248165f8"
            ],
            [
                "765270910eb0e47d"
            ],
            [
                "dfc64f6ce7cd4348"
            ]
        ]
    },
    {
        "id": "60f1c36683a9219a",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "37b0a51897821d8e",
        "type": "function",
        "z": "254289433a84914b",
        "name": "sortByPriceAsc()",
        "func": "if (Array.isArray(msg.payload)) {\n    msg.payload.sort((a, b) => a.price - b.price);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 540,
        "wires": [
            [
                "dfc64f6ce7cd4348"
            ]
        ]
    },
    {
        "id": "bf23b5b6a37925a4",
        "type": "function",
        "z": "254289433a84914b",
        "name": "sortByPriceDesc()",
        "func": "if (Array.isArray(msg.payload)) {\n    msg.payload.sort((a, b) => b.price - a.price);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "dfc64f6ce7cd4348"
            ]
        ]
    },
    {
        "id": "765270910eb0e47d",
        "type": "function",
        "z": "254289433a84914b",
        "name": "sortByPrice()",
        "func": "const {min, max} = msg.req.query;\n\nmsg.payload = msg.payload.filter(product =>\n    product.price >= min && product.price <= max\n);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 720,
        "wires": [
            [
                "dfc64f6ce7cd4348"
            ]
        ]
    },
    {
        "id": "9e97302fa04b7641",
        "type": "function",
        "z": "254289433a84914b",
        "name": "sortByCategory()",
        "func": "const { label } = msg.req.query;\n\nmsg.payload = msg.payload.filter(product =>\n    product.category.label === label\n);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 770,
        "y": 680,
        "wires": [
            [
                "dfc64f6ce7cd4348"
            ]
        ]
    },
    {
        "id": "2824b734248165f8",
        "type": "function",
        "z": "254289433a84914b",
        "name": "sortByCountry()",
        "func": "const { name } = msg.req.query;\nconst countries = name.split(',');\n\nmsg.payload = msg.payload.filter(product => {\n    const productCountries = product.countries.map(country => country.toLowerCase());\n    const matchingCountries = productCountries.filter(country => countries.includes(country));\n    return matchingCountries.length > 0;\n});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 760,
        "wires": [
            [
                "dfc64f6ce7cd4348"
            ]
        ]
    },
    {
        "id": "c45c51d330c57e55",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/upload-image",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 130,
        "y": 1960,
        "wires": [
            [
                "bee92b8855e56fef",
                "d86fef73bbbde5b7"
            ]
        ]
    },
    {
        "id": "bee92b8855e56fef",
        "type": "file",
        "z": "254289433a84914b",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 370,
        "y": 1960,
        "wires": [
            [
                "67b01a9a18701437"
            ]
        ]
    },
    {
        "id": "67b01a9a18701437",
        "type": "function",
        "z": "254289433a84914b",
        "name": "Save to DB",
        "func": "// const mongoose = global.get('mongoose');\n// const Product = mongoose.model('Product');\n\nconst imagePath = msg.req.file.path;\n\n// const product = new Product({\n//     name: 'Coffee',\n//     imagePath: imagePath\n// });\n// product.save((err, product) => {\n//     if (err) {\n//         console.error(err);\n//         return;\n//     }\n//     console.log('Product saved to database:', product);\n//     msg.payload = { imagePath: imagePath };\n//     return msg;\n// });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1960,
        "wires": [
            [
                "a51b42c9e9f4fb8e",
                "e093ad4febe95730"
            ]
        ]
    },
    {
        "id": "a51b42c9e9f4fb8e",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 1960,
        "wires": []
    },
    {
        "id": "e093ad4febe95730",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1900,
        "wires": []
    },
    {
        "id": "d86fef73bbbde5b7",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1920,
        "wires": []
    },
    {
        "id": "fa14afe9d996fd63",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/delete/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "d267db7de063a15f"
            ]
        ]
    },
    {
        "id": "3aaace6cc45a0895",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 820,
        "wires": []
    },
    {
        "id": "d267db7de063a15f",
        "type": "function",
        "z": "254289433a84914b",
        "name": "deleteProduct()",
        "func": "const productId = msg.req.params.id;\n\nmsg.payload = {\n    $set: { deleted: true }\n};\n\nmsg.query = {\n    _id: objectid(productId)\n};\n\nmsg.collection = \"products\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 380,
        "y": 820,
        "wires": [
            [
                "0fa253218bc61e87"
            ]
        ]
    },
    {
        "id": "0fa253218bc61e87",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 600,
        "y": 820,
        "wires": [
            [
                "3aaace6cc45a0895"
            ]
        ]
    },
    {
        "id": "7eb80bddeb1c1873",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/update/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 2160,
        "wires": [
            [
                "0b171b8828295d57",
                "7131fe137a3b51ef"
            ]
        ]
    },
    {
        "id": "490f6ccade89a327",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 2060,
        "wires": []
    },
    {
        "id": "7131fe137a3b51ef",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 2020,
        "wires": []
    },
    {
        "id": "0b171b8828295d57",
        "type": "function",
        "z": "254289433a84914b",
        "name": "function 11",
        "func": "const decodedFilename = msg.req.body[0].originalname;\nconst outputString = decodedFilename.replace(/י/g, '`')\n\nmsg.filename = \"/data/storage/\" + msg.req.query.path + \"/\" + outputString;;\n\nmsg.payload.file = msg.req.files[0].buffer;\nmsg.payload = msg.payload.file;\nreturn [null, msg];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "formidable",
                "module": "formidable"
            }
        ],
        "x": 350,
        "y": 2160,
        "wires": [
            [
                "490f6ccade89a327"
            ]
        ]
    },
    {
        "id": "412d8e59.ada5a",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/img",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1320,
        "wires": [
            [
                "b13b26047187de90"
            ]
        ]
    },
    {
        "id": "85e75f9.45f94a",
        "type": "change",
        "z": "254289433a84914b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "'/data/upload' & '2023-04-23_13-02.png'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "ccc9150b.a8cb08",
        "type": "file in",
        "z": "254289433a84914b",
        "name": "get_file",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 520,
        "y": 1320,
        "wires": [
            [
                "55fbb339aef9940d"
            ]
        ]
    },
    {
        "id": "5b12233f.af313c",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9ed97723.1f95b8",
        "type": "change",
        "z": "254289433a84914b",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "image/png",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers['access-control-allow-credentials']",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "headers.accept-ranges",
                "pt": "msg",
                "to": "bytes",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-xss-protection",
                "pt": "msg",
                "to": "1; mode=block",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-frame-options",
                "pt": "msg",
                "to": "SAMEORIGIN",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.nel",
                "pt": "msg",
                "to": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-dns-prefetch-control",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.x-download-options",
                "pt": "msg",
                "to": "noopen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1320,
        "wires": [
            [
                "dfa25ea9526af83d",
                "59f69c20a9e0e4a7"
            ]
        ]
    },
    {
        "id": "dfa25ea9526af83d",
        "type": "function",
        "z": "254289433a84914b",
        "name": "function",
        "func": "msg.headers = {\n    ...msg.headers,\n    ['x-content-type-options']: 'nosniff',\n    ['access-control-allow-credentials']: true,\n    ['cache-control']: 'public, max-age=14400',\n    ['cf-cache-status']: 'EXPIRED',\n    ['cf-ray']: '747ece538ba590b2-FRA',\n//report - to: { \"endpoints\": [{ \"url\": \"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=6FLrusuf%2B3JD%2By2hHTtEFI4LqfbHg6hE9OshVZ%2FGZHvRuKBMMPaZtmTvqedBYxS2H4SCN2hx0ulKIF4%2FetNCOLpZzbK46BXQfKwNg05NsEn3O4Uu6Oh5sk2s1A9i87oLs0t0yHlvVjNd\" }], \"group\": \"cf-nel\", \"max_age\": 604800 }\n//server: cloudflare\n    ['strict-transport-security']: 'max-age=15552000; includeSubDomains',\n    // ['link']: 'rel=\"shortcut icon\" href=\"\"',\n    ['Content-Security-Policy']:\"img-src 'none'\",\n    ['x-xss-protection']:' 1; mode = block'\n    //rel: \"shortcut icon\",\n    //vary: 'Origin,Accept-Encoding'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1320,
        "wires": [
            [
                "5b12233f.af313c"
            ]
        ]
    },
    {
        "id": "59f69c20a9e0e4a7",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1260,
        "wires": []
    },
    {
        "id": "55fbb339aef9940d",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b13b26047187de90",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 205",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 1220,
        "wires": []
    },
    {
        "id": "25d331c47673b875",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 1400,
        "wires": []
    },
    {
        "id": "8b524c92bbfe272b",
        "type": "file",
        "z": "254289433a84914b",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 540,
        "y": 1500,
        "wires": [
            [
                "9168e7108a2b4ada",
                "4b117820fde776cf"
            ]
        ]
    },
    {
        "id": "2a7ff6b0722ba2a0",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/fm/upload/image",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 120,
        "y": 1480,
        "wires": [
            [
                "543cb92c34ddb951"
            ]
        ]
    },
    {
        "id": "87fc55ef1737e55e",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 1540,
        "wires": []
    },
    {
        "id": "543cb92c34ddb951",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "if(msg.payload.file){\n   msg.path = \"/data/storage/\" + msg.req.query.path + \"/\"\n   msg.filename = msg.payload.file\n   return[msg,null]\n}\n\nconst decodedFilename = msg.req.files[0].originalname;\nconst outputString = decodedFilename.replace(/י/g, '`')\n\nmsg.filename = \"/data/storage/\" + msg.req.query.path + \"/\" + outputString;;\n\n//msg.filename =\"/data/\"+msg.req.query.path+\"/\"+ msg.req.files[0].originalname;\n\nmsg.payload.file = msg.req.files[0].buffer;\nmsg.payload = msg.payload.file;\nreturn [null,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1460,
        "wires": [
            [
                "4eaf62cec5c18cc6"
            ],
            [
                "8b524c92bbfe272b"
            ]
        ]
    },
    {
        "id": "915ff95f6a12e8cd",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "// @ts-ignore\nNewMsg = {};\nNewMsg.payload={\n    success:true,\n};\nNewMsg.payload.payload = msg.payload.map(elem=>{\n    return{\n        \"isDirectory\":elem.stat.isDirectory,\n        \"name\":elem.name,\n        \"path\":elem.name,\n        \"size\":(elem.stat.size/1048576).toFixed(3) + \"Мb\",\n        \"editedAt\":elem.stat.created,\n    }\n})\n\nmsg.payload = NewMsg.payload;\nmsg.req =\"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1480,
        "wires": [
            [
                "87fc55ef1737e55e",
                "71a76034243b9e8a"
            ]
        ]
    },
    {
        "id": "9168e7108a2b4ada",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "msg.payload.start = \"/data/storage/\"+msg.req.query.path;\n//msg.payload.start = \"/data/\"+msg.req.query.path;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1500,
        "wires": [
            [
                "456473a8af5c5091",
                "1d46fe1b37b3d5ea"
            ]
        ]
    },
    {
        "id": "4b117820fde776cf",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1d46fe1b37b3d5ea",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1440,
        "wires": []
    },
    {
        "id": "71a76034243b9e8a",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1460,
        "wires": []
    },
    {
        "id": "8b3ea1178114ffe6",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1560,
        "wires": []
    },
    {
        "id": "2daef178831d17e1",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "node.warn(msg.req.query.path)\nmsg.payload={\n}\nmsg.payload.start = \"/data/storage/\"+msg.req.query.path;\nnode.warn(msg.payload.start)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1400,
        "wires": [
            [
                "bcdfc1d11118a9af"
            ]
        ]
    },
    {
        "id": "fe8943eb38940fe6",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "// @ts-ignore\nNewMsg = {};\nNewMsg.payload={\n    success:true,\n};\nNewMsg.payload.payload = msg.payload.map(elem=>{\n    return{\n        \"isDirectory\":elem.stat.isDirectory,\n        \"name\":elem.name,\n        \"path\":elem.name,\n        \"size\":(elem.stat.size/1048576).toFixed(3) + \"Мb\",\n        \"editedAt\":elem.stat.created,\n    }\n})\n\nmsg.payload = NewMsg.payload;\nmsg.req =\"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1400,
        "wires": [
            [
                "25d331c47673b875"
            ]
        ]
    },
    {
        "id": "4eaf62cec5c18cc6",
        "type": "fs-mkdir",
        "z": "254289433a84914b",
        "name": "",
        "purpose": "reg",
        "path": "path",
        "pathType": "msg",
        "foldername": "filename",
        "foldernameType": "msg",
        "recursive": true,
        "exists": true,
        "prefix": "",
        "prefixType": "str",
        "mode": "777",
        "property": "payload",
        "propertyType": "msg",
        "x": 530,
        "y": 1400,
        "wires": [
            [
                "2daef178831d17e1"
            ]
        ]
    },
    {
        "id": "456473a8af5c5091",
        "type": "fs-file-lister",
        "z": "254289433a84914b",
        "name": "",
        "start": "{{msg.payload.start}}",
        "pattern": "",
        "folders": "",
        "hidden": true,
        "lstype": "both",
        "path": false,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 940,
        "y": 1480,
        "wires": [
            [
                "915ff95f6a12e8cd",
                "8b3ea1178114ffe6"
            ]
        ]
    },
    {
        "id": "bcdfc1d11118a9af",
        "type": "fs-file-lister",
        "z": "254289433a84914b",
        "name": "",
        "start": "{{msg.payload.start}}",
        "pattern": "",
        "folders": "",
        "hidden": true,
        "lstype": "both",
        "path": false,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 980,
        "y": 1400,
        "wires": [
            [
                "fe8943eb38940fe6"
            ]
        ]
    },
    {
        "id": "62f1eb0d.6f79ac",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "/upload_files",
        "url": "/upload_files",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 110,
        "y": 1700,
        "wires": [
            [
                "e63265bb.9c173"
            ]
        ]
    },
    {
        "id": "e63265bb.9c173",
        "type": "function",
        "z": "254289433a84914b",
        "name": "uploadFiles",
        "func": "const upload = multer({ dest: \"uploads/\" });\n\n    upload.array('files')(msg.req, msg.res, function (err) {\n        if (err) {\n            // handle the error\n            console.log(err);\n            msg.payload = { error: err.message };\n            return msg;\n        } else {\n            // the file(s) have been uploaded\n            const files = msg.req.files;\n            console.log(files);\n            // do something with the files\n            msg.payload = { message: \"Successfully uploaded files\" };\n            return msg;\n        }\n    })",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "multer",
                "module": "multer"
            }
        ],
        "x": 310,
        "y": 1700,
        "wires": [
            [
                "9aeb0b0e.7d008"
            ]
        ]
    },
    {
        "id": "9aeb0b0e.7d008",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1700,
        "wires": []
    },
    {
        "id": "5a176d594bb6a57f",
        "type": "inject",
        "z": "254289433a84914b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1280,
        "wires": [
            [
                "b24f4e006b3f910e"
            ]
        ]
    },
    {
        "id": "b24f4e006b3f910e",
        "type": "function",
        "z": "254289433a84914b",
        "name": "Handle File Upload",
        "func": "const currentDir = path.resolve('');\nmsg.filename = currentDir + \"/data/upload/\" + \"2023-04-23_13-02.png\";\n\nnode.warn(msg.filename);\n\nreturn  msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 304.89581298828125,
        "y": 1261.6666259765625,
        "wires": [
            [
                "ccc9150b.a8cb08"
            ]
        ]
    },
    {
        "id": "fa7fc71873399e18",
        "type": "function",
        "z": "254289433a84914b",
        "name": "function 15",
        "func": "const tempDir = path.resolve('') + \"/temp\";\nconst multerConfig = multer.diskStorage({\n    destination: tempDir,\n    filename: (req, file, cb) => {\n        node.warn(file);\n        cb(null, file.originalname)\n    }\n});\n\nconst upload = multer({\n    storage: multerConfig\n}).single(\"image\");\n\nupload(msg.req, msg.res, function (err) {\n    if (err) {\n        msg.payload = \"Error uploading file: \" + err.message;\n        // return node.send([null, msg]);\n        return node.send( msg);\n\n    }\n\n    msg.payload = \"File uploaded successfully\";\n    return node.send(msg);\n});\n\n// const multerConfig = multer.memoryStorage();\n\n// const upload = multer({\n//     storage: multerConfig\n// }).single(\"image\");\n\n// upload(msg.req, msg.res, function (err) {\n//     if (err) {\n//         msg.payload = \"Error uploading file: \" + err.message;\n//         return node.send(msg);\n//     }\n\n//     // Access the uploaded file buffer\n//     const fileBuffer = msg.req.file.buffer;\n\n//     msg.payload = \"File uploaded successfully\";\n//     msg.file = {\n//         buffer: fileBuffer,\n//         mimetype: msg.req.file.mimetype,\n//         originalname: msg.req.file.originalname\n//     };\n\n//     return node.send(msg);\n// });\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "multer",
                "module": "multer"
            },
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 750,
        "y": 2140,
        "wires": [
            [
                "a9a89c2d19c818af",
                "4c05111f6007dd2e"
            ]
        ]
    },
    {
        "id": "4c05111f6007dd2e",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 2140,
        "wires": []
    },
    {
        "id": "a9a89c2d19c818af",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 217",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2180,
        "wires": []
    },
    {
        "id": "75530cd2.06a71c",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 90,
        "y": 2620,
        "wires": [
            [
                "97fcfe96.6f76c"
            ]
        ]
    },
    {
        "id": "97fcfe96.6f76c",
        "type": "function",
        "z": "254289433a84914b",
        "name": "Handle File Upload",
        "func": "const currentDir = path.resolve('');\nconst decodedFilename = msg.req.files[0].originalname;\n\nmsg.filename = currentDir + \"/data\" + msg.req.route.path + \"/\" + decodedFilename;\nmsg.path = currentDir + \"/data\" + msg.req.route.path + \"/\"\nmsg.payload.file = msg.req.files[0].buffer;\nmsg.payload = msg.payload.file;\n\nreturn [null, msg];\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 290,
        "y": 2620,
        "wires": [
            [
                "4d6cfdccc34546b2"
            ],
            [
                "488bf4b1d65b9a3b"
            ]
        ]
    },
    {
        "id": "746c3ba6.29a1a4",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 2600,
        "wires": []
    },
    {
        "id": "4d6cfdccc34546b2",
        "type": "fs-mkdir",
        "z": "254289433a84914b",
        "name": "",
        "purpose": "reg",
        "path": "path",
        "pathType": "msg",
        "foldername": "filename",
        "foldernameType": "msg",
        "recursive": true,
        "exists": true,
        "prefix": "",
        "prefixType": "str",
        "mode": "777",
        "property": "payload",
        "propertyType": "msg",
        "x": 510,
        "y": 2560,
        "wires": [
            [
                "74c6161a7d0ee640"
            ]
        ]
    },
    {
        "id": "488bf4b1d65b9a3b",
        "type": "file",
        "z": "254289433a84914b",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 480,
        "y": 2680,
        "wires": [
            [
                "6afb867fea63aacd"
            ]
        ]
    },
    {
        "id": "74c6161a7d0ee640",
        "type": "function",
        "z": "254289433a84914b",
        "name": "function 13",
        "func": "node.warn(msg.req.route.path)\nmsg.payload = {\n}\nmsg.payload.start = \"/data/storage/\" + msg.req.route.path;\nnode.warn(msg.payload.start)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2560,
        "wires": [
            [
                "5680f7958362b006"
            ]
        ]
    },
    {
        "id": "5680f7958362b006",
        "type": "fs-file-lister",
        "z": "254289433a84914b",
        "name": "",
        "start": "{{msg.payload.start}}",
        "pattern": "",
        "folders": "",
        "hidden": true,
        "lstype": "both",
        "path": false,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 940,
        "y": 2560,
        "wires": [
            [
                "e9552de6832c27c6"
            ]
        ]
    },
    {
        "id": "6afb867fea63aacd",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "msg.payload.start = \"/data\" + msg.req.route.path;\n//msg.payload.start = \"/data/\"+msg.req.query.path;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2680,
        "wires": [
            [
                "72656fb743344b5e"
            ]
        ]
    },
    {
        "id": "72656fb743344b5e",
        "type": "fs-file-lister",
        "z": "254289433a84914b",
        "name": "",
        "start": "{{msg.payload.start}}",
        "pattern": "",
        "folders": "",
        "hidden": true,
        "lstype": "both",
        "path": false,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": true,
        "x": 880,
        "y": 2680,
        "wires": [
            [
                "db8c30bc4bdea22b"
            ]
        ]
    },
    {
        "id": "1faf730dc135de6d",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 2540,
        "wires": []
    },
    {
        "id": "ccaec6ccf77fdd23",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 2680,
        "wires": []
    },
    {
        "id": "db8c30bc4bdea22b",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "// @ts-ignore\nNewMsg = {};\nNewMsg.payload={\n    success:true,\n};\nNewMsg.payload.payload = msg.payload.map(elem=>{\n    return{\n        \"isDirectory\":elem.stat.isDirectory,\n        \"name\":elem.name,\n        \"path\":elem.name,\n        \"size\":(elem.stat.size/1048576).toFixed(3) + \"Мb\",\n        \"editedAt\":elem.stat.created,\n    }\n})\n\nmsg.payload = NewMsg.payload;\nmsg.req =\"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 2680,
        "wires": [
            [
                "ccaec6ccf77fdd23",
                "863941b8a161ae08"
            ]
        ]
    },
    {
        "id": "863941b8a161ae08",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 2600,
        "wires": []
    },
    {
        "id": "e9552de6832c27c6",
        "type": "function",
        "z": "254289433a84914b",
        "name": "",
        "func": "// @ts-ignore\nNewMsg = {};\nNewMsg.payload={\n    success:true,\n};\nNewMsg.payload.payload = msg.payload.map(elem=>{\n    return{\n        \"isDirectory\":elem.stat.isDirectory,\n        \"name\":elem.name,\n        \"path\":elem.name,\n        \"size\":(elem.stat.size/1048576).toFixed(3) + \"Мb\",\n        \"editedAt\":elem.stat.created,\n    }\n})\n\nmsg.payload = NewMsg.payload;\nmsg.req =\"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2540,
        "wires": [
            [
                "1faf730dc135de6d"
            ]
        ]
    },
    {
        "id": "af9cb3fe6349abc5",
        "type": "http in",
        "z": "254289433a84914b",
        "name": "",
        "url": "/create-product",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 2400,
        "wires": [
            [
                "3e3630905f7c21f0"
            ]
        ]
    },
    {
        "id": "9d0d9d240fbc03be",
        "type": "function",
        "z": "254289433a84914b",
        "name": "createProduct()",
        "func": "const { name, code, availability, sourness, bitterness, \nsturdiness, saturation, price, description, \nroastLevel, countries, image, category } = msg.req.body;\n\nnode.warn(\"my warning\");\n\nmsg.payload = {\n    _id: objectid(),\n    name,\n    code, \n    availability: availability === \"true\",\n    category: objectid(category), \n    characteristics: {\n        sourness: parseInt(sourness), \n        bitterness: parseInt(bitterness),\n        sturdiness: parseInt(sturdiness),\n        saturation: parseInt(saturation)\n    },\n    price: parseInt(price),\n    description,\n    roastLevel, \n    countries: countries.split(',').map(c => c.trim()),\n    image,\n    deleted: false\n}\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 2400,
        "wires": [
            [
                "087c5252c5f5d140",
                "26e642865e710f71"
            ]
        ]
    },
    {
        "id": "087c5252c5f5d140",
        "type": "link call",
        "z": "254289433a84914b",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 570,
        "y": 2400,
        "wires": [
            [
                "32d463f5f48cd8d4",
                "ec15ee196ca430c3"
            ]
        ]
    },
    {
        "id": "32d463f5f48cd8d4",
        "type": "function",
        "z": "254289433a84914b",
        "name": "checkStatus()",
        "func": "msg.payload = {\n    success: true,\n    message: \"Everything is OK\"\n}\n\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2400,
        "wires": [
            [
                "3e3630905f7c21f0",
                "54d584f7311a03af"
            ]
        ]
    },
    {
        "id": "3e3630905f7c21f0",
        "type": "http response",
        "z": "254289433a84914b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 2400,
        "wires": []
    },
    {
        "id": "26e642865e710f71",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 220",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 2260,
        "wires": []
    },
    {
        "id": "ec15ee196ca430c3",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2280,
        "wires": []
    },
    {
        "id": "54d584f7311a03af",
        "type": "debug",
        "z": "254289433a84914b",
        "name": "debug 222",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2300,
        "wires": []
    },
    {
        "id": "a9fb567ad07dc66a",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD find",
        "links": [],
        "x": 125,
        "y": 60,
        "wires": [
            [
                "2cbd6b0583706522"
            ]
        ]
    },
    {
        "id": "82a088390a0e13bb",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 60,
        "wires": []
    },
    {
        "id": "2cbd6b0583706522",
        "type": "mongodb in",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD find",
        "collection": "",
        "operation": "find",
        "x": 260,
        "y": 60,
        "wires": [
            [
                "82a088390a0e13bb"
            ]
        ]
    },
    {
        "id": "d66b320450918147",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD aggregate",
        "links": [],
        "x": 125,
        "y": 120,
        "wires": [
            [
                "d1982e39382e3370"
            ]
        ]
    },
    {
        "id": "be6649ec5b1c6c0e",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 120,
        "wires": []
    },
    {
        "id": "d1982e39382e3370",
        "type": "mongodb in",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD aggregate",
        "collection": "",
        "operation": "aggregate",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "be6649ec5b1c6c0e"
            ]
        ]
    },
    {
        "id": "1b4a93743b4cb585",
        "type": "mongodb out",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD insert",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 270,
        "y": 200,
        "wires": []
    },
    {
        "id": "11c9729c152a736b",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD insert",
        "links": [],
        "x": 125,
        "y": 200,
        "wires": [
            [
                "1b4a93743b4cb585",
                "78487177228b9424"
            ]
        ]
    },
    {
        "id": "78487177228b9424",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 235,
        "y": 240,
        "wires": []
    },
    {
        "id": "37fd6e76c8c5cf02",
        "type": "mongodb out",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD update",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "update",
        "x": 280,
        "y": 300,
        "wires": []
    },
    {
        "id": "6e02acf20c7c434c",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD update",
        "links": [
            "159f20af26b27591"
        ],
        "x": 125,
        "y": 300,
        "wires": [
            [
                "37fd6e76c8c5cf02",
                "a9bea4a92fcfa3c1"
            ]
        ]
    },
    {
        "id": "a9bea4a92fcfa3c1",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 235,
        "y": 340,
        "wires": []
    },
    {
        "id": "1893ba3cf8670b46",
        "type": "link in",
        "z": "5625818d4797c40c",
        "name": "PROD count",
        "links": [],
        "x": 135,
        "y": 400,
        "wires": [
            [
                "522c4fea30675a88"
            ]
        ]
    },
    {
        "id": "f6f164110b64c323",
        "type": "link out",
        "z": "5625818d4797c40c",
        "name": "",
        "mode": "return",
        "links": [],
        "x": 445,
        "y": 400,
        "wires": []
    },
    {
        "id": "522c4fea30675a88",
        "type": "mongodb in",
        "z": "5625818d4797c40c",
        "mongodb": "2272c92dc80bcb38",
        "name": "PROD count",
        "collection": "",
        "operation": "count",
        "x": 270,
        "y": 400,
        "wires": [
            [
                "f6f164110b64c323"
            ]
        ]
    },
    {
        "id": "56fe8f7960bcea2a",
        "type": "inject",
        "z": "572dfaa9458e5333",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 60,
        "wires": [
            [
                "c4603ba9cebd3f3a"
            ]
        ]
    },
    {
        "id": "219b221508c01985",
        "type": "link call",
        "z": "572dfaa9458e5333",
        "name": "",
        "links": [
            "d66b320450918147"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "c91ff7591b4bf82c"
            ]
        ]
    },
    {
        "id": "d98a2a92e02864f9",
        "type": "link call",
        "z": "572dfaa9458e5333",
        "name": "",
        "links": [
            "d66b320450918147"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "45c63c01c890dba6"
            ]
        ]
    },
    {
        "id": "45c63c01c890dba6",
        "type": "debug",
        "z": "572dfaa9458e5333",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "c4603ba9cebd3f3a",
        "type": "function",
        "z": "572dfaa9458e5333",
        "name": "function 8",
        "func": "msg.payload = [\n    { $unwind: \"$products\" },\n    { $group: { _id: \"$products.productId\", count: { $sum: 1 } } },\n    { $sort: { count: -1 } }\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "219b221508c01985"
            ]
        ]
    },
    {
        "id": "c91ff7591b4bf82c",
        "type": "function",
        "z": "572dfaa9458e5333",
        "name": "function 9",
        "func": "msg.payload = [\n    {\n        $lookup: {\n            from: \"orders\",\n            localField: \"_id\",\n            foreignField: \"products.productId\",\n            as: \"purchases\"\n        }\n    },\n    { $addFields: { purchaseCount: { $size: \"$purchases\" } } },\n    { $sort: { purchaseCount: -1 } }\n];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "d98a2a92e02864f9"
            ]
        ]
    },
    {
        "id": "1bbf2fa2.1ab72a",
        "type": "http in",
        "z": "572dfaa9458e5333",
        "name": "",
        "url": "/upload-image",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "a50ecff1aa431e53",
                "95db3a046c1f0657"
            ]
        ]
    },
    {
        "id": "9a92597d.b3f3d",
        "type": "http response",
        "z": "572dfaa9458e5333",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 300,
        "wires": []
    },
    {
        "id": "1e89526f5e4050d6",
        "type": "debug",
        "z": "572dfaa9458e5333",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 240,
        "wires": []
    },
    {
        "id": "a50ecff1aa431e53",
        "type": "debug",
        "z": "572dfaa9458e5333",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 260,
        "wires": []
    },
    {
        "id": "95db3a046c1f0657",
        "type": "function",
        "z": "572dfaa9458e5333",
        "name": "function 10",
        "func": "const upload = multer().single('image');\n\n// module.exports = function (RED) {\n//     function MyNode(config) {\n//         RED.nodes.createNode(this, config);\n\n//         this.on('input', function (msg) {\n//             upload(msg.req, msg.res, function (err) {\n//                 if (err) {\n//                     // handle the error\n//                 } else {\n//                     // the file has been uploaded\n//                     const file = msg.req.file;\n//                     // do something with the file\n//                 }\n//             });\n//         });\n//     }\n\n//     RED.nodes.registerType('my-node', MyNode);\n// }\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "multer",
                "module": "multer"
            }
        ],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "9a92597d.b3f3d",
                "1e89526f5e4050d6"
            ]
        ]
    },
    {
        "id": "4d4f4e21.e3b3e4",
        "type": "http in",
        "z": "572dfaa9458e5333",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "16af42a6.20347d",
        "type": "file",
        "z": "572dfaa9458e5333",
        "name": "",
        "filename": "uploads/{{{headers['content-disposition'].split('; ')[2].split('=')[1].replace(/\"/g, '')}}}",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 910,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e7bb1a4d640a45bd",
        "type": "multipart-decoder",
        "z": "572dfaa9458e5333",
        "name": "",
        "ret": "txt",
        "url": "",
        "authentication": "basic",
        "delay": 0,
        "maximum": 1000000,
        "blockSize": 1,
        "enableLog": "off",
        "x": 430,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "02867b04f323983e",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "41ce73f80f967f2c"
            ]
        ]
    },
    {
        "id": "41ce73f80f967f2c",
        "type": "file in",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "read file",
        "filename": ".node-red\\projects\\masterkava_back\\file.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 100,
        "wires": [
            [
                "7d745f91f4ac681a"
            ]
        ]
    },
    {
        "id": "7d745f91f4ac681a",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "debug 211",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "1fd66a7ed16cf866",
        "type": "file",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "append file",
        "filename": ".node-red\\projects\\masterkava_back\\file1.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 470,
        "y": 260,
        "wires": [
            [
                "af9e5bccd86b36de"
            ]
        ]
    },
    {
        "id": "1eb1841fc3df6a8e",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "89c2e450b846c7c9"
            ]
        ]
    },
    {
        "id": "af9e5bccd86b36de",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "debug 212",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "cc98cb3f9f3ee8d6",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "set msg.payload",
        "func": "msg.payload = \"add\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4f6b79dc7a07448b",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "9f43ceecbe5c8618",
        "name": "Read Files",
        "info": "Path: set a path from \"C:/Users/DELL/\"\n",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "5b2452df50fbf1b9",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "Append/Create/Delete Files",
        "info": "msg.payload = \"a text that you want to add\";\n",
        "x": 180,
        "y": 220,
        "wires": []
    },
    {
        "id": "89c2e450b846c7c9",
        "type": "change",
        "z": "27e958a26f8b472d",
        "g": "10f169318ad1a329",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "1fd66a7ed16cf866"
            ]
        ]
    },
    {
        "id": "07525484e994f095",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "name": "function 2",
        "func": "// const objectId = global.get('objectid');\n// const newId = objectId().toString();\n\nmsg.payload = {\n    _id: objectid(), \n    name: 'test4', \n    deleted: false\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "88df837133eddd5d"
            ]
        ]
    },
    {
        "id": "28f6603d256eb461",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "07525484e994f095"
            ]
        ]
    },
    {
        "id": "88df837133eddd5d",
        "type": "mongodb out",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "mongodb": "2272c92dc80bcb38",
        "name": "",
        "collection": "products",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 600,
        "y": 460,
        "wires": []
    },
    {
        "id": "9497ff1729fe73e6",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "b7f4d86114a55d70",
        "name": "Work with MongoDB",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "dcac4fe4170f8a1a",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "ad62655d84b9aff1"
            ]
        ]
    },
    {
        "id": "b4519518901a3b1b",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 620,
        "wires": []
    },
    {
        "id": "ad62655d84b9aff1",
        "type": "subflow:a097c62b59a93fa5",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "",
        "x": 330,
        "y": 620,
        "wires": [
            [
                "b4519518901a3b1b"
            ]
        ]
    },
    {
        "id": "9b18d0692c3da728",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "1c2202b3413ad6f7",
        "name": "Subflows",
        "info": "",
        "x": 120,
        "y": 580,
        "wires": []
    },
    {
        "id": "331eaafb44d0fdc5",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "a129d65a5e8a09de"
            ]
        ]
    },
    {
        "id": "a129d65a5e8a09de",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "function 3",
        "func": "msg.payload = {\n    $set: { name: \"updadfsdgsdte\" }\n};\n\nmsg.query = { \n    _id: objectid('64308f9153446dfc20000013') \n};\n\n// msg.payload = {\n//     query: { _id: objectid('64308f9153446dfc20000013') },\n//     update: { $set: { name: \"update\" } }\n// };\n\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 800,
        "wires": [
            [
                "eb3ac15f633f1fc7"
            ]
        ]
    },
    {
        "id": "eb3ac15f633f1fc7",
        "type": "link call",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "links": [
            "6e02acf20c7c434c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 800,
        "wires": [
            [
                "024dd4cd90e32b52"
            ]
        ]
    },
    {
        "id": "024dd4cd90e32b52",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 800,
        "wires": []
    },
    {
        "id": "8e604cd11c5a9dcb",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 860,
        "wires": [
            [
                "716ef4768a93e2e0"
            ]
        ]
    },
    {
        "id": "716ef4768a93e2e0",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "function 4",
        "func": "msg.payload = {\n    _id: objectid(),\n    name: 'test4',\n    deleted: false\n};\n\nmsg.collection = \"products\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 860,
        "wires": [
            [
                "a691858b679166fa"
            ]
        ]
    },
    {
        "id": "a691858b679166fa",
        "type": "link call",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "",
        "links": [
            "11c9729c152a736b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 860,
        "wires": [
            [
                "ea801f1f8aa87cf7"
            ]
        ]
    },
    {
        "id": "ea801f1f8aa87cf7",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 860,
        "wires": []
    },
    {
        "id": "0edd863d78f53e53",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "024c1ba1dc39c40d",
        "name": "MongoDB ",
        "info": "",
        "x": 120,
        "y": 740,
        "wires": []
    },
    {
        "id": "29fd809dc62fe637",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1040,
        "wires": [
            [
                "36073d925a2cd8ef"
            ]
        ]
    },
    {
        "id": "ae82a760f512d716",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "debug 213",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1040,
        "wires": []
    },
    {
        "id": "36073d925a2cd8ef",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "get path",
        "func": "// Get the absolute path of the current directory\nconst currentDir = path.resolve('');\n\n// Log the current directory to the Node-RED console\nnode.warn(currentDir);\n\n// Return the current directory as the output message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 320,
        "y": 1040,
        "wires": [
            [
                "ae82a760f512d716"
            ]
        ]
    },
    {
        "id": "ab7126da435ada47",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "2e23327e0aa0042c",
        "name": "Get a path of current directory",
        "info": "",
        "x": 180,
        "y": 980,
        "wires": []
    },
    {
        "id": "a310f231786a1a62",
        "type": "fs-mkdir",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "",
        "purpose": "reg",
        "path": "path",
        "pathType": "msg",
        "foldername": "payload",
        "foldernameType": "msg",
        "recursive": true,
        "exists": true,
        "prefix": "",
        "prefixType": "str",
        "mode": "777",
        "property": "payload",
        "propertyType": "msg",
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "8639587e5b6a68a8"
            ]
        ]
    },
    {
        "id": "d3ce801aa9c8eae8",
        "type": "inject",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "folder",
        "payloadType": "str",
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "aa246705f235df7c"
            ]
        ]
    },
    {
        "id": "8639587e5b6a68a8",
        "type": "debug",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "debug 215",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1220,
        "wires": []
    },
    {
        "id": "aa246705f235df7c",
        "type": "function",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "set path",
        "func": "const currentDir = path.resolve('');\nmsg.path = currentDir + \"/data\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 260,
        "y": 1220,
        "wires": [
            [
                "a310f231786a1a62"
            ]
        ]
    },
    {
        "id": "458063eab4db9cad",
        "type": "comment",
        "z": "27e958a26f8b472d",
        "g": "46754a6258cacf85",
        "name": "Create folder",
        "info": "",
        "x": 130,
        "y": 1160,
        "wires": []
    }
]